
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.12.0
 * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
 */
Prisma.prismaVersion = {
  client: "4.12.0",
  engine: "d6e67a83f971b175a593ccc12e15c4a757f93ffe"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.One_time_tokensScalarFieldEnum = makeEnum({
  id: 'id',
  token_id: 'token_id',
  token_type: 'token_type',
  expires_at: 'expires_at',
  date_created: 'date_created',
  updated_at: 'updated_at'
});

exports.Prisma.Provider_usersScalarFieldEnum = makeEnum({
  id: 'id',
  provider: 'provider',
  provider_user_id: 'provider_user_id',
  user_id: 'user_id',
  updated_at: 'updated_at'
});

exports.Prisma.Refresh_tokensScalarFieldEnum = makeEnum({
  id: 'id',
  token_id: 'token_id',
  user_id: 'user_id',
  is_active: 'is_active',
  date_created: 'date_created',
  updated_at: 'updated_at'
});

exports.Prisma.SessionsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  sid: 'sid',
  start_time: 'start_time',
  end_time: 'end_time',
  access_token: 'access_token',
  csrf_token: 'csrf_token',
  is_active: 'is_active',
  ip_address: 'ip_address',
  updated_at: 'updated_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.SubjectsScalarFieldEnum = makeEnum({
  id: 'id',
  nama_matkul: 'nama_matkul',
  nama_dosen: 'nama_dosen',
  hari: 'hari',
  jam: 'jam',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.TasksScalarFieldEnum = makeEnum({
  id: 'id',
  job: 'job',
  subject_id: 'subject_id',
  jenis: 'jenis',
  deadline: 'deadline',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  uuid: 'uuid',
  email: 'email',
  password: 'password',
  avatar: 'avatar',
  permissions: 'permissions',
  first_name: 'first_name',
  last_name: 'last_name',
  role: 'role',
  email_verified: 'email_verified',
  is_active: 'is_active',
  last_login: 'last_login',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  updated_at: 'updated_at'
});
exports.Provider = makeEnum({
  GOOGLE: 'GOOGLE'
});

exports.Role = makeEnum({
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  GENERAL: 'GENERAL'
});

exports.tokenType = makeEnum({
  RESET: 'RESET'
});

exports.Prisma.ModelName = makeEnum({
  users: 'users',
  provider_users: 'provider_users',
  sessions: 'sessions',
  refresh_tokens: 'refresh_tokens',
  one_time_tokens: 'one_time_tokens',
  Subjects: 'Subjects',
  Tasks: 'Tasks'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
