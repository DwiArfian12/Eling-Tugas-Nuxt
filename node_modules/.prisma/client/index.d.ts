
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = {
  id: number
  uuid: string
  email: string
  password: string
  avatar: string | null
  permissions: string | null
  first_name: string
  last_name: string
  role: Role
  email_verified: boolean
  is_active: boolean
  last_login: Date | null
  created_at: Date
  deleted_at: Date | null
  updated_at: Date | null
}

/**
 * Model provider_users
 * 
 */
export type provider_users = {
  id: number
  provider: Provider
  provider_user_id: string
  user_id: number
  updated_at: Date | null
}

/**
 * Model sessions
 * 
 */
export type sessions = {
  id: number
  user_id: number
  sid: string
  start_time: Date
  end_time: Date | null
  access_token: string
  csrf_token: string
  is_active: boolean
  ip_address: string
  updated_at: Date | null
}

/**
 * Model refresh_tokens
 * 
 */
export type refresh_tokens = {
  id: number
  token_id: string
  user_id: number
  is_active: boolean
  date_created: Date
  updated_at: Date | null
}

/**
 * Model one_time_tokens
 * 
 */
export type one_time_tokens = {
  id: number
  token_id: string
  token_type: tokenType | null
  expires_at: Date
  date_created: Date
  updated_at: Date | null
}

/**
 * Model Subjects
 * 
 */
export type Subjects = {
  id: number
  nama_matkul: string
  nama_dosen: string
  hari: string
  jam: string
  created_at: Date
  updated_at: Date | null
}

/**
 * Model Tasks
 * 
 */
export type Tasks = {
  id: number
  job: string
  subject_id: number
  jenis: string
  deadline: string
  status: string
  created_at: Date
  updated_at: Date | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Provider: {
  GOOGLE: 'GOOGLE'
};

export type Provider = (typeof Provider)[keyof typeof Provider]


export const Role: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  GENERAL: 'GENERAL'
};

export type Role = (typeof Role)[keyof typeof Role]


export const tokenType: {
  RESET: 'RESET'
};

export type tokenType = (typeof tokenType)[keyof typeof tokenType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.provider_users`: Exposes CRUD operations for the **provider_users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Provider_users
    * const provider_users = await prisma.provider_users.findMany()
    * ```
    */
  get provider_users(): Prisma.provider_usersDelegate<GlobalReject>;

  /**
   * `prisma.sessions`: Exposes CRUD operations for the **sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.sessions.findMany()
    * ```
    */
  get sessions(): Prisma.sessionsDelegate<GlobalReject>;

  /**
   * `prisma.refresh_tokens`: Exposes CRUD operations for the **refresh_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Refresh_tokens
    * const refresh_tokens = await prisma.refresh_tokens.findMany()
    * ```
    */
  get refresh_tokens(): Prisma.refresh_tokensDelegate<GlobalReject>;

  /**
   * `prisma.one_time_tokens`: Exposes CRUD operations for the **one_time_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more One_time_tokens
    * const one_time_tokens = await prisma.one_time_tokens.findMany()
    * ```
    */
  get one_time_tokens(): Prisma.one_time_tokensDelegate<GlobalReject>;

  /**
   * `prisma.subjects`: Exposes CRUD operations for the **Subjects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subjects.findMany()
    * ```
    */
  get subjects(): Prisma.SubjectsDelegate<GlobalReject>;

  /**
   * `prisma.tasks`: Exposes CRUD operations for the **Tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.tasks.findMany()
    * ```
    */
  get tasks(): Prisma.TasksDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.12.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    provider_users: 'provider_users',
    sessions: 'sessions',
    refresh_tokens: 'refresh_tokens',
    one_time_tokens: 'one_time_tokens',
    Subjects: 'Subjects',
    Tasks: 'Tasks'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    refresh_tokens: number
    sessions: number
    provider_users: number
  }

  export type UsersCountOutputTypeSelect = {
    refresh_tokens?: boolean
    sessions?: boolean
    provider_users?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    uuid: string | null
    email: string | null
    password: string | null
    avatar: string | null
    permissions: string | null
    first_name: string | null
    last_name: string | null
    role: Role | null
    email_verified: boolean | null
    is_active: boolean | null
    last_login: Date | null
    created_at: Date | null
    deleted_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    uuid: string | null
    email: string | null
    password: string | null
    avatar: string | null
    permissions: string | null
    first_name: string | null
    last_name: string | null
    role: Role | null
    email_verified: boolean | null
    is_active: boolean | null
    last_login: Date | null
    created_at: Date | null
    deleted_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    uuid: number
    email: number
    password: number
    avatar: number
    permissions: number
    first_name: number
    last_name: number
    role: number
    email_verified: number
    is_active: number
    last_login: number
    created_at: number
    deleted_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    uuid?: true
    email?: true
    password?: true
    avatar?: true
    permissions?: true
    first_name?: true
    last_name?: true
    role?: true
    email_verified?: true
    is_active?: true
    last_login?: true
    created_at?: true
    deleted_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    uuid?: true
    email?: true
    password?: true
    avatar?: true
    permissions?: true
    first_name?: true
    last_name?: true
    role?: true
    email_verified?: true
    is_active?: true
    last_login?: true
    created_at?: true
    deleted_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    uuid?: true
    email?: true
    password?: true
    avatar?: true
    permissions?: true
    first_name?: true
    last_name?: true
    role?: true
    email_verified?: true
    is_active?: true
    last_login?: true
    created_at?: true
    deleted_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    uuid: string
    email: string
    password: string
    avatar: string | null
    permissions: string | null
    first_name: string
    last_name: string
    role: Role
    email_verified: boolean
    is_active: boolean
    last_login: Date | null
    created_at: Date
    deleted_at: Date | null
    updated_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    uuid?: boolean
    email?: boolean
    password?: boolean
    avatar?: boolean
    permissions?: boolean
    first_name?: boolean
    last_name?: boolean
    role?: boolean
    email_verified?: boolean
    is_active?: boolean
    last_login?: boolean
    created_at?: boolean
    deleted_at?: boolean
    updated_at?: boolean
    refresh_tokens?: boolean | users$refresh_tokensArgs
    sessions?: boolean | users$sessionsArgs
    provider_users?: boolean | users$provider_usersArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type usersInclude = {
    refresh_tokens?: boolean | users$refresh_tokensArgs
    sessions?: boolean | users$sessionsArgs
    provider_users?: boolean | users$provider_usersArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<S extends boolean | null | undefined | usersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? users :
    S extends undefined ? never :
    S extends { include: any } & (usersArgs | usersFindManyArgs)
    ? users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'refresh_tokens' ? Array < refresh_tokensGetPayload<S['include'][P]>>  :
        P extends 'sessions' ? Array < sessionsGetPayload<S['include'][P]>>  :
        P extends 'provider_users' ? Array < provider_usersGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (usersArgs | usersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'refresh_tokens' ? Array < refresh_tokensGetPayload<S['select'][P]>>  :
        P extends 'sessions' ? Array < sessionsGetPayload<S['select'][P]>>  :
        P extends 'provider_users' ? Array < provider_usersGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
      : users


  type usersCountArgs = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): Prisma.PrismaPromise<Array<usersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    refresh_tokens<T extends users$refresh_tokensArgs= {}>(args?: Subset<T, users$refresh_tokensArgs>): Prisma.PrismaPromise<Array<refresh_tokensGetPayload<T>>| Null>;

    sessions<T extends users$sessionsArgs= {}>(args?: Subset<T, users$sessionsArgs>): Prisma.PrismaPromise<Array<sessionsGetPayload<T>>| Null>;

    provider_users<T extends users$provider_usersArgs= {}>(args?: Subset<T, users$provider_usersArgs>): Prisma.PrismaPromise<Array<provider_usersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.refresh_tokens
   */
  export type users$refresh_tokensArgs = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    where?: refresh_tokensWhereInput
    orderBy?: Enumerable<refresh_tokensOrderByWithRelationInput>
    cursor?: refresh_tokensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Refresh_tokensScalarFieldEnum>
  }


  /**
   * users.sessions
   */
  export type users$sessionsArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    where?: sessionsWhereInput
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    cursor?: sessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * users.provider_users
   */
  export type users$provider_usersArgs = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    where?: provider_usersWhereInput
    orderBy?: Enumerable<provider_usersOrderByWithRelationInput>
    cursor?: provider_usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Provider_usersScalarFieldEnum>
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
  }



  /**
   * Model provider_users
   */


  export type AggregateProvider_users = {
    _count: Provider_usersCountAggregateOutputType | null
    _avg: Provider_usersAvgAggregateOutputType | null
    _sum: Provider_usersSumAggregateOutputType | null
    _min: Provider_usersMinAggregateOutputType | null
    _max: Provider_usersMaxAggregateOutputType | null
  }

  export type Provider_usersAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Provider_usersSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Provider_usersMinAggregateOutputType = {
    id: number | null
    provider: Provider | null
    provider_user_id: string | null
    user_id: number | null
    updated_at: Date | null
  }

  export type Provider_usersMaxAggregateOutputType = {
    id: number | null
    provider: Provider | null
    provider_user_id: string | null
    user_id: number | null
    updated_at: Date | null
  }

  export type Provider_usersCountAggregateOutputType = {
    id: number
    provider: number
    provider_user_id: number
    user_id: number
    updated_at: number
    _all: number
  }


  export type Provider_usersAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Provider_usersSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Provider_usersMinAggregateInputType = {
    id?: true
    provider?: true
    provider_user_id?: true
    user_id?: true
    updated_at?: true
  }

  export type Provider_usersMaxAggregateInputType = {
    id?: true
    provider?: true
    provider_user_id?: true
    user_id?: true
    updated_at?: true
  }

  export type Provider_usersCountAggregateInputType = {
    id?: true
    provider?: true
    provider_user_id?: true
    user_id?: true
    updated_at?: true
    _all?: true
  }

  export type Provider_usersAggregateArgs = {
    /**
     * Filter which provider_users to aggregate.
     */
    where?: provider_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of provider_users to fetch.
     */
    orderBy?: Enumerable<provider_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: provider_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` provider_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` provider_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned provider_users
    **/
    _count?: true | Provider_usersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Provider_usersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Provider_usersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Provider_usersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Provider_usersMaxAggregateInputType
  }

  export type GetProvider_usersAggregateType<T extends Provider_usersAggregateArgs> = {
        [P in keyof T & keyof AggregateProvider_users]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvider_users[P]>
      : GetScalarType<T[P], AggregateProvider_users[P]>
  }




  export type Provider_usersGroupByArgs = {
    where?: provider_usersWhereInput
    orderBy?: Enumerable<provider_usersOrderByWithAggregationInput>
    by: Provider_usersScalarFieldEnum[]
    having?: provider_usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Provider_usersCountAggregateInputType | true
    _avg?: Provider_usersAvgAggregateInputType
    _sum?: Provider_usersSumAggregateInputType
    _min?: Provider_usersMinAggregateInputType
    _max?: Provider_usersMaxAggregateInputType
  }


  export type Provider_usersGroupByOutputType = {
    id: number
    provider: Provider
    provider_user_id: string
    user_id: number
    updated_at: Date | null
    _count: Provider_usersCountAggregateOutputType | null
    _avg: Provider_usersAvgAggregateOutputType | null
    _sum: Provider_usersSumAggregateOutputType | null
    _min: Provider_usersMinAggregateOutputType | null
    _max: Provider_usersMaxAggregateOutputType | null
  }

  type GetProvider_usersGroupByPayload<T extends Provider_usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Provider_usersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Provider_usersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Provider_usersGroupByOutputType[P]>
            : GetScalarType<T[P], Provider_usersGroupByOutputType[P]>
        }
      >
    >


  export type provider_usersSelect = {
    id?: boolean
    provider?: boolean
    provider_user_id?: boolean
    user_id?: boolean
    updated_at?: boolean
    user?: boolean | usersArgs
  }


  export type provider_usersInclude = {
    user?: boolean | usersArgs
  }

  export type provider_usersGetPayload<S extends boolean | null | undefined | provider_usersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? provider_users :
    S extends undefined ? never :
    S extends { include: any } & (provider_usersArgs | provider_usersFindManyArgs)
    ? provider_users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? usersGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (provider_usersArgs | provider_usersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? usersGetPayload<S['select'][P]> | null :  P extends keyof provider_users ? provider_users[P] : never
  } 
      : provider_users


  type provider_usersCountArgs = 
    Omit<provider_usersFindManyArgs, 'select' | 'include'> & {
      select?: Provider_usersCountAggregateInputType | true
    }

  export interface provider_usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Provider_users that matches the filter.
     * @param {provider_usersFindUniqueArgs} args - Arguments to find a Provider_users
     * @example
     * // Get one Provider_users
     * const provider_users = await prisma.provider_users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends provider_usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, provider_usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'provider_users'> extends True ? Prisma__provider_usersClient<provider_usersGetPayload<T>> : Prisma__provider_usersClient<provider_usersGetPayload<T> | null, null>

    /**
     * Find one Provider_users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {provider_usersFindUniqueOrThrowArgs} args - Arguments to find a Provider_users
     * @example
     * // Get one Provider_users
     * const provider_users = await prisma.provider_users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends provider_usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, provider_usersFindUniqueOrThrowArgs>
    ): Prisma__provider_usersClient<provider_usersGetPayload<T>>

    /**
     * Find the first Provider_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provider_usersFindFirstArgs} args - Arguments to find a Provider_users
     * @example
     * // Get one Provider_users
     * const provider_users = await prisma.provider_users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends provider_usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, provider_usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'provider_users'> extends True ? Prisma__provider_usersClient<provider_usersGetPayload<T>> : Prisma__provider_usersClient<provider_usersGetPayload<T> | null, null>

    /**
     * Find the first Provider_users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provider_usersFindFirstOrThrowArgs} args - Arguments to find a Provider_users
     * @example
     * // Get one Provider_users
     * const provider_users = await prisma.provider_users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends provider_usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, provider_usersFindFirstOrThrowArgs>
    ): Prisma__provider_usersClient<provider_usersGetPayload<T>>

    /**
     * Find zero or more Provider_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provider_usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Provider_users
     * const provider_users = await prisma.provider_users.findMany()
     * 
     * // Get first 10 Provider_users
     * const provider_users = await prisma.provider_users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const provider_usersWithIdOnly = await prisma.provider_users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends provider_usersFindManyArgs>(
      args?: SelectSubset<T, provider_usersFindManyArgs>
    ): Prisma.PrismaPromise<Array<provider_usersGetPayload<T>>>

    /**
     * Create a Provider_users.
     * @param {provider_usersCreateArgs} args - Arguments to create a Provider_users.
     * @example
     * // Create one Provider_users
     * const Provider_users = await prisma.provider_users.create({
     *   data: {
     *     // ... data to create a Provider_users
     *   }
     * })
     * 
    **/
    create<T extends provider_usersCreateArgs>(
      args: SelectSubset<T, provider_usersCreateArgs>
    ): Prisma__provider_usersClient<provider_usersGetPayload<T>>

    /**
     * Create many Provider_users.
     *     @param {provider_usersCreateManyArgs} args - Arguments to create many Provider_users.
     *     @example
     *     // Create many Provider_users
     *     const provider_users = await prisma.provider_users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends provider_usersCreateManyArgs>(
      args?: SelectSubset<T, provider_usersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Provider_users.
     * @param {provider_usersDeleteArgs} args - Arguments to delete one Provider_users.
     * @example
     * // Delete one Provider_users
     * const Provider_users = await prisma.provider_users.delete({
     *   where: {
     *     // ... filter to delete one Provider_users
     *   }
     * })
     * 
    **/
    delete<T extends provider_usersDeleteArgs>(
      args: SelectSubset<T, provider_usersDeleteArgs>
    ): Prisma__provider_usersClient<provider_usersGetPayload<T>>

    /**
     * Update one Provider_users.
     * @param {provider_usersUpdateArgs} args - Arguments to update one Provider_users.
     * @example
     * // Update one Provider_users
     * const provider_users = await prisma.provider_users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends provider_usersUpdateArgs>(
      args: SelectSubset<T, provider_usersUpdateArgs>
    ): Prisma__provider_usersClient<provider_usersGetPayload<T>>

    /**
     * Delete zero or more Provider_users.
     * @param {provider_usersDeleteManyArgs} args - Arguments to filter Provider_users to delete.
     * @example
     * // Delete a few Provider_users
     * const { count } = await prisma.provider_users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends provider_usersDeleteManyArgs>(
      args?: SelectSubset<T, provider_usersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Provider_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provider_usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Provider_users
     * const provider_users = await prisma.provider_users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends provider_usersUpdateManyArgs>(
      args: SelectSubset<T, provider_usersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Provider_users.
     * @param {provider_usersUpsertArgs} args - Arguments to update or create a Provider_users.
     * @example
     * // Update or create a Provider_users
     * const provider_users = await prisma.provider_users.upsert({
     *   create: {
     *     // ... data to create a Provider_users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Provider_users we want to update
     *   }
     * })
    **/
    upsert<T extends provider_usersUpsertArgs>(
      args: SelectSubset<T, provider_usersUpsertArgs>
    ): Prisma__provider_usersClient<provider_usersGetPayload<T>>

    /**
     * Count the number of Provider_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {provider_usersCountArgs} args - Arguments to filter Provider_users to count.
     * @example
     * // Count the number of Provider_users
     * const count = await prisma.provider_users.count({
     *   where: {
     *     // ... the filter for the Provider_users we want to count
     *   }
     * })
    **/
    count<T extends provider_usersCountArgs>(
      args?: Subset<T, provider_usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Provider_usersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Provider_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Provider_usersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Provider_usersAggregateArgs>(args: Subset<T, Provider_usersAggregateArgs>): Prisma.PrismaPromise<GetProvider_usersAggregateType<T>>

    /**
     * Group by Provider_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Provider_usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Provider_usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Provider_usersGroupByArgs['orderBy'] }
        : { orderBy?: Provider_usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Provider_usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProvider_usersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for provider_users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__provider_usersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * provider_users base type for findUnique actions
   */
  export type provider_usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    /**
     * Filter, which provider_users to fetch.
     */
    where: provider_usersWhereUniqueInput
  }

  /**
   * provider_users findUnique
   */
  export interface provider_usersFindUniqueArgs extends provider_usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * provider_users findUniqueOrThrow
   */
  export type provider_usersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    /**
     * Filter, which provider_users to fetch.
     */
    where: provider_usersWhereUniqueInput
  }


  /**
   * provider_users base type for findFirst actions
   */
  export type provider_usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    /**
     * Filter, which provider_users to fetch.
     */
    where?: provider_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of provider_users to fetch.
     */
    orderBy?: Enumerable<provider_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for provider_users.
     */
    cursor?: provider_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` provider_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` provider_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of provider_users.
     */
    distinct?: Enumerable<Provider_usersScalarFieldEnum>
  }

  /**
   * provider_users findFirst
   */
  export interface provider_usersFindFirstArgs extends provider_usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * provider_users findFirstOrThrow
   */
  export type provider_usersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    /**
     * Filter, which provider_users to fetch.
     */
    where?: provider_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of provider_users to fetch.
     */
    orderBy?: Enumerable<provider_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for provider_users.
     */
    cursor?: provider_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` provider_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` provider_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of provider_users.
     */
    distinct?: Enumerable<Provider_usersScalarFieldEnum>
  }


  /**
   * provider_users findMany
   */
  export type provider_usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    /**
     * Filter, which provider_users to fetch.
     */
    where?: provider_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of provider_users to fetch.
     */
    orderBy?: Enumerable<provider_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing provider_users.
     */
    cursor?: provider_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` provider_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` provider_users.
     */
    skip?: number
    distinct?: Enumerable<Provider_usersScalarFieldEnum>
  }


  /**
   * provider_users create
   */
  export type provider_usersCreateArgs = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    /**
     * The data needed to create a provider_users.
     */
    data: XOR<provider_usersCreateInput, provider_usersUncheckedCreateInput>
  }


  /**
   * provider_users createMany
   */
  export type provider_usersCreateManyArgs = {
    /**
     * The data used to create many provider_users.
     */
    data: Enumerable<provider_usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * provider_users update
   */
  export type provider_usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    /**
     * The data needed to update a provider_users.
     */
    data: XOR<provider_usersUpdateInput, provider_usersUncheckedUpdateInput>
    /**
     * Choose, which provider_users to update.
     */
    where: provider_usersWhereUniqueInput
  }


  /**
   * provider_users updateMany
   */
  export type provider_usersUpdateManyArgs = {
    /**
     * The data used to update provider_users.
     */
    data: XOR<provider_usersUpdateManyMutationInput, provider_usersUncheckedUpdateManyInput>
    /**
     * Filter which provider_users to update
     */
    where?: provider_usersWhereInput
  }


  /**
   * provider_users upsert
   */
  export type provider_usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    /**
     * The filter to search for the provider_users to update in case it exists.
     */
    where: provider_usersWhereUniqueInput
    /**
     * In case the provider_users found by the `where` argument doesn't exist, create a new provider_users with this data.
     */
    create: XOR<provider_usersCreateInput, provider_usersUncheckedCreateInput>
    /**
     * In case the provider_users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<provider_usersUpdateInput, provider_usersUncheckedUpdateInput>
  }


  /**
   * provider_users delete
   */
  export type provider_usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
    /**
     * Filter which provider_users to delete.
     */
    where: provider_usersWhereUniqueInput
  }


  /**
   * provider_users deleteMany
   */
  export type provider_usersDeleteManyArgs = {
    /**
     * Filter which provider_users to delete
     */
    where?: provider_usersWhereInput
  }


  /**
   * provider_users without action
   */
  export type provider_usersArgs = {
    /**
     * Select specific fields to fetch from the provider_users
     */
    select?: provider_usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: provider_usersInclude | null
  }



  /**
   * Model sessions
   */


  export type AggregateSessions = {
    _count: SessionsCountAggregateOutputType | null
    _avg: SessionsAvgAggregateOutputType | null
    _sum: SessionsSumAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  export type SessionsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type SessionsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type SessionsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    sid: string | null
    start_time: Date | null
    end_time: Date | null
    access_token: string | null
    csrf_token: string | null
    is_active: boolean | null
    ip_address: string | null
    updated_at: Date | null
  }

  export type SessionsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    sid: string | null
    start_time: Date | null
    end_time: Date | null
    access_token: string | null
    csrf_token: string | null
    is_active: boolean | null
    ip_address: string | null
    updated_at: Date | null
  }

  export type SessionsCountAggregateOutputType = {
    id: number
    user_id: number
    sid: number
    start_time: number
    end_time: number
    access_token: number
    csrf_token: number
    is_active: number
    ip_address: number
    updated_at: number
    _all: number
  }


  export type SessionsAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type SessionsSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type SessionsMinAggregateInputType = {
    id?: true
    user_id?: true
    sid?: true
    start_time?: true
    end_time?: true
    access_token?: true
    csrf_token?: true
    is_active?: true
    ip_address?: true
    updated_at?: true
  }

  export type SessionsMaxAggregateInputType = {
    id?: true
    user_id?: true
    sid?: true
    start_time?: true
    end_time?: true
    access_token?: true
    csrf_token?: true
    is_active?: true
    ip_address?: true
    updated_at?: true
  }

  export type SessionsCountAggregateInputType = {
    id?: true
    user_id?: true
    sid?: true
    start_time?: true
    end_time?: true
    access_token?: true
    csrf_token?: true
    is_active?: true
    ip_address?: true
    updated_at?: true
    _all?: true
  }

  export type SessionsAggregateArgs = {
    /**
     * Filter which sessions to aggregate.
     */
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sessions
    **/
    _count?: true | SessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionsMaxAggregateInputType
  }

  export type GetSessionsAggregateType<T extends SessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessions[P]>
      : GetScalarType<T[P], AggregateSessions[P]>
  }




  export type SessionsGroupByArgs = {
    where?: sessionsWhereInput
    orderBy?: Enumerable<sessionsOrderByWithAggregationInput>
    by: SessionsScalarFieldEnum[]
    having?: sessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionsCountAggregateInputType | true
    _avg?: SessionsAvgAggregateInputType
    _sum?: SessionsSumAggregateInputType
    _min?: SessionsMinAggregateInputType
    _max?: SessionsMaxAggregateInputType
  }


  export type SessionsGroupByOutputType = {
    id: number
    user_id: number
    sid: string
    start_time: Date
    end_time: Date | null
    access_token: string
    csrf_token: string
    is_active: boolean
    ip_address: string
    updated_at: Date | null
    _count: SessionsCountAggregateOutputType | null
    _avg: SessionsAvgAggregateOutputType | null
    _sum: SessionsSumAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  type GetSessionsGroupByPayload<T extends SessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionsGroupByOutputType[P]>
            : GetScalarType<T[P], SessionsGroupByOutputType[P]>
        }
      >
    >


  export type sessionsSelect = {
    id?: boolean
    user_id?: boolean
    sid?: boolean
    start_time?: boolean
    end_time?: boolean
    access_token?: boolean
    csrf_token?: boolean
    is_active?: boolean
    ip_address?: boolean
    updated_at?: boolean
    user?: boolean | usersArgs
  }


  export type sessionsInclude = {
    user?: boolean | usersArgs
  }

  export type sessionsGetPayload<S extends boolean | null | undefined | sessionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? sessions :
    S extends undefined ? never :
    S extends { include: any } & (sessionsArgs | sessionsFindManyArgs)
    ? sessions  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? usersGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (sessionsArgs | sessionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? usersGetPayload<S['select'][P]> | null :  P extends keyof sessions ? sessions[P] : never
  } 
      : sessions


  type sessionsCountArgs = 
    Omit<sessionsFindManyArgs, 'select' | 'include'> & {
      select?: SessionsCountAggregateInputType | true
    }

  export interface sessionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Sessions that matches the filter.
     * @param {sessionsFindUniqueArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sessionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sessionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sessions'> extends True ? Prisma__sessionsClient<sessionsGetPayload<T>> : Prisma__sessionsClient<sessionsGetPayload<T> | null, null>

    /**
     * Find one Sessions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {sessionsFindUniqueOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sessionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, sessionsFindUniqueOrThrowArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Find the first Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsFindFirstArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sessionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sessionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sessions'> extends True ? Prisma__sessionsClient<sessionsGetPayload<T>> : Prisma__sessionsClient<sessionsGetPayload<T> | null, null>

    /**
     * Find the first Sessions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsFindFirstOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sessionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, sessionsFindFirstOrThrowArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.sessions.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.sessions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionsWithIdOnly = await prisma.sessions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sessionsFindManyArgs>(
      args?: SelectSubset<T, sessionsFindManyArgs>
    ): Prisma.PrismaPromise<Array<sessionsGetPayload<T>>>

    /**
     * Create a Sessions.
     * @param {sessionsCreateArgs} args - Arguments to create a Sessions.
     * @example
     * // Create one Sessions
     * const Sessions = await prisma.sessions.create({
     *   data: {
     *     // ... data to create a Sessions
     *   }
     * })
     * 
    **/
    create<T extends sessionsCreateArgs>(
      args: SelectSubset<T, sessionsCreateArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {sessionsCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const sessions = await prisma.sessions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sessionsCreateManyArgs>(
      args?: SelectSubset<T, sessionsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sessions.
     * @param {sessionsDeleteArgs} args - Arguments to delete one Sessions.
     * @example
     * // Delete one Sessions
     * const Sessions = await prisma.sessions.delete({
     *   where: {
     *     // ... filter to delete one Sessions
     *   }
     * })
     * 
    **/
    delete<T extends sessionsDeleteArgs>(
      args: SelectSubset<T, sessionsDeleteArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Update one Sessions.
     * @param {sessionsUpdateArgs} args - Arguments to update one Sessions.
     * @example
     * // Update one Sessions
     * const sessions = await prisma.sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sessionsUpdateArgs>(
      args: SelectSubset<T, sessionsUpdateArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {sessionsDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sessionsDeleteManyArgs>(
      args?: SelectSubset<T, sessionsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const sessions = await prisma.sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sessionsUpdateManyArgs>(
      args: SelectSubset<T, sessionsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sessions.
     * @param {sessionsUpsertArgs} args - Arguments to update or create a Sessions.
     * @example
     * // Update or create a Sessions
     * const sessions = await prisma.sessions.upsert({
     *   create: {
     *     // ... data to create a Sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sessions we want to update
     *   }
     * })
    **/
    upsert<T extends sessionsUpsertArgs>(
      args: SelectSubset<T, sessionsUpsertArgs>
    ): Prisma__sessionsClient<sessionsGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.sessions.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends sessionsCountArgs>(
      args?: Subset<T, sessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionsAggregateArgs>(args: Subset<T, SessionsAggregateArgs>): Prisma.PrismaPromise<GetSessionsAggregateType<T>>

    /**
     * Group by Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionsGroupByArgs['orderBy'] }
        : { orderBy?: SessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sessionsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * sessions base type for findUnique actions
   */
  export type sessionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    /**
     * Filter, which sessions to fetch.
     */
    where: sessionsWhereUniqueInput
  }

  /**
   * sessions findUnique
   */
  export interface sessionsFindUniqueArgs extends sessionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sessions findUniqueOrThrow
   */
  export type sessionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    /**
     * Filter, which sessions to fetch.
     */
    where: sessionsWhereUniqueInput
  }


  /**
   * sessions base type for findFirst actions
   */
  export type sessionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    /**
     * Filter, which sessions to fetch.
     */
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     */
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     */
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }

  /**
   * sessions findFirst
   */
  export interface sessionsFindFirstArgs extends sessionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sessions findFirstOrThrow
   */
  export type sessionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    /**
     * Filter, which sessions to fetch.
     */
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     */
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     */
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * sessions findMany
   */
  export type sessionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    /**
     * Filter, which sessions to fetch.
     */
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     */
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sessions.
     */
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * sessions create
   */
  export type sessionsCreateArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    /**
     * The data needed to create a sessions.
     */
    data: XOR<sessionsCreateInput, sessionsUncheckedCreateInput>
  }


  /**
   * sessions createMany
   */
  export type sessionsCreateManyArgs = {
    /**
     * The data used to create many sessions.
     */
    data: Enumerable<sessionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sessions update
   */
  export type sessionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    /**
     * The data needed to update a sessions.
     */
    data: XOR<sessionsUpdateInput, sessionsUncheckedUpdateInput>
    /**
     * Choose, which sessions to update.
     */
    where: sessionsWhereUniqueInput
  }


  /**
   * sessions updateMany
   */
  export type sessionsUpdateManyArgs = {
    /**
     * The data used to update sessions.
     */
    data: XOR<sessionsUpdateManyMutationInput, sessionsUncheckedUpdateManyInput>
    /**
     * Filter which sessions to update
     */
    where?: sessionsWhereInput
  }


  /**
   * sessions upsert
   */
  export type sessionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    /**
     * The filter to search for the sessions to update in case it exists.
     */
    where: sessionsWhereUniqueInput
    /**
     * In case the sessions found by the `where` argument doesn't exist, create a new sessions with this data.
     */
    create: XOR<sessionsCreateInput, sessionsUncheckedCreateInput>
    /**
     * In case the sessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sessionsUpdateInput, sessionsUncheckedUpdateInput>
  }


  /**
   * sessions delete
   */
  export type sessionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
    /**
     * Filter which sessions to delete.
     */
    where: sessionsWhereUniqueInput
  }


  /**
   * sessions deleteMany
   */
  export type sessionsDeleteManyArgs = {
    /**
     * Filter which sessions to delete
     */
    where?: sessionsWhereInput
  }


  /**
   * sessions without action
   */
  export type sessionsArgs = {
    /**
     * Select specific fields to fetch from the sessions
     */
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: sessionsInclude | null
  }



  /**
   * Model refresh_tokens
   */


  export type AggregateRefresh_tokens = {
    _count: Refresh_tokensCountAggregateOutputType | null
    _avg: Refresh_tokensAvgAggregateOutputType | null
    _sum: Refresh_tokensSumAggregateOutputType | null
    _min: Refresh_tokensMinAggregateOutputType | null
    _max: Refresh_tokensMaxAggregateOutputType | null
  }

  export type Refresh_tokensAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Refresh_tokensSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Refresh_tokensMinAggregateOutputType = {
    id: number | null
    token_id: string | null
    user_id: number | null
    is_active: boolean | null
    date_created: Date | null
    updated_at: Date | null
  }

  export type Refresh_tokensMaxAggregateOutputType = {
    id: number | null
    token_id: string | null
    user_id: number | null
    is_active: boolean | null
    date_created: Date | null
    updated_at: Date | null
  }

  export type Refresh_tokensCountAggregateOutputType = {
    id: number
    token_id: number
    user_id: number
    is_active: number
    date_created: number
    updated_at: number
    _all: number
  }


  export type Refresh_tokensAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Refresh_tokensSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Refresh_tokensMinAggregateInputType = {
    id?: true
    token_id?: true
    user_id?: true
    is_active?: true
    date_created?: true
    updated_at?: true
  }

  export type Refresh_tokensMaxAggregateInputType = {
    id?: true
    token_id?: true
    user_id?: true
    is_active?: true
    date_created?: true
    updated_at?: true
  }

  export type Refresh_tokensCountAggregateInputType = {
    id?: true
    token_id?: true
    user_id?: true
    is_active?: true
    date_created?: true
    updated_at?: true
    _all?: true
  }

  export type Refresh_tokensAggregateArgs = {
    /**
     * Filter which refresh_tokens to aggregate.
     */
    where?: refresh_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refresh_tokens to fetch.
     */
    orderBy?: Enumerable<refresh_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: refresh_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refresh_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refresh_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned refresh_tokens
    **/
    _count?: true | Refresh_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Refresh_tokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Refresh_tokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Refresh_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Refresh_tokensMaxAggregateInputType
  }

  export type GetRefresh_tokensAggregateType<T extends Refresh_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregateRefresh_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefresh_tokens[P]>
      : GetScalarType<T[P], AggregateRefresh_tokens[P]>
  }




  export type Refresh_tokensGroupByArgs = {
    where?: refresh_tokensWhereInput
    orderBy?: Enumerable<refresh_tokensOrderByWithAggregationInput>
    by: Refresh_tokensScalarFieldEnum[]
    having?: refresh_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Refresh_tokensCountAggregateInputType | true
    _avg?: Refresh_tokensAvgAggregateInputType
    _sum?: Refresh_tokensSumAggregateInputType
    _min?: Refresh_tokensMinAggregateInputType
    _max?: Refresh_tokensMaxAggregateInputType
  }


  export type Refresh_tokensGroupByOutputType = {
    id: number
    token_id: string
    user_id: number
    is_active: boolean
    date_created: Date
    updated_at: Date | null
    _count: Refresh_tokensCountAggregateOutputType | null
    _avg: Refresh_tokensAvgAggregateOutputType | null
    _sum: Refresh_tokensSumAggregateOutputType | null
    _min: Refresh_tokensMinAggregateOutputType | null
    _max: Refresh_tokensMaxAggregateOutputType | null
  }

  type GetRefresh_tokensGroupByPayload<T extends Refresh_tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Refresh_tokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Refresh_tokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Refresh_tokensGroupByOutputType[P]>
            : GetScalarType<T[P], Refresh_tokensGroupByOutputType[P]>
        }
      >
    >


  export type refresh_tokensSelect = {
    id?: boolean
    token_id?: boolean
    user_id?: boolean
    is_active?: boolean
    date_created?: boolean
    updated_at?: boolean
    user?: boolean | usersArgs
  }


  export type refresh_tokensInclude = {
    user?: boolean | usersArgs
  }

  export type refresh_tokensGetPayload<S extends boolean | null | undefined | refresh_tokensArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? refresh_tokens :
    S extends undefined ? never :
    S extends { include: any } & (refresh_tokensArgs | refresh_tokensFindManyArgs)
    ? refresh_tokens  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? usersGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (refresh_tokensArgs | refresh_tokensFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? usersGetPayload<S['select'][P]> | null :  P extends keyof refresh_tokens ? refresh_tokens[P] : never
  } 
      : refresh_tokens


  type refresh_tokensCountArgs = 
    Omit<refresh_tokensFindManyArgs, 'select' | 'include'> & {
      select?: Refresh_tokensCountAggregateInputType | true
    }

  export interface refresh_tokensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Refresh_tokens that matches the filter.
     * @param {refresh_tokensFindUniqueArgs} args - Arguments to find a Refresh_tokens
     * @example
     * // Get one Refresh_tokens
     * const refresh_tokens = await prisma.refresh_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends refresh_tokensFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, refresh_tokensFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'refresh_tokens'> extends True ? Prisma__refresh_tokensClient<refresh_tokensGetPayload<T>> : Prisma__refresh_tokensClient<refresh_tokensGetPayload<T> | null, null>

    /**
     * Find one Refresh_tokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {refresh_tokensFindUniqueOrThrowArgs} args - Arguments to find a Refresh_tokens
     * @example
     * // Get one Refresh_tokens
     * const refresh_tokens = await prisma.refresh_tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends refresh_tokensFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, refresh_tokensFindUniqueOrThrowArgs>
    ): Prisma__refresh_tokensClient<refresh_tokensGetPayload<T>>

    /**
     * Find the first Refresh_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refresh_tokensFindFirstArgs} args - Arguments to find a Refresh_tokens
     * @example
     * // Get one Refresh_tokens
     * const refresh_tokens = await prisma.refresh_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends refresh_tokensFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, refresh_tokensFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'refresh_tokens'> extends True ? Prisma__refresh_tokensClient<refresh_tokensGetPayload<T>> : Prisma__refresh_tokensClient<refresh_tokensGetPayload<T> | null, null>

    /**
     * Find the first Refresh_tokens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refresh_tokensFindFirstOrThrowArgs} args - Arguments to find a Refresh_tokens
     * @example
     * // Get one Refresh_tokens
     * const refresh_tokens = await prisma.refresh_tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends refresh_tokensFindFirstOrThrowArgs>(
      args?: SelectSubset<T, refresh_tokensFindFirstOrThrowArgs>
    ): Prisma__refresh_tokensClient<refresh_tokensGetPayload<T>>

    /**
     * Find zero or more Refresh_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refresh_tokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Refresh_tokens
     * const refresh_tokens = await prisma.refresh_tokens.findMany()
     * 
     * // Get first 10 Refresh_tokens
     * const refresh_tokens = await prisma.refresh_tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refresh_tokensWithIdOnly = await prisma.refresh_tokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends refresh_tokensFindManyArgs>(
      args?: SelectSubset<T, refresh_tokensFindManyArgs>
    ): Prisma.PrismaPromise<Array<refresh_tokensGetPayload<T>>>

    /**
     * Create a Refresh_tokens.
     * @param {refresh_tokensCreateArgs} args - Arguments to create a Refresh_tokens.
     * @example
     * // Create one Refresh_tokens
     * const Refresh_tokens = await prisma.refresh_tokens.create({
     *   data: {
     *     // ... data to create a Refresh_tokens
     *   }
     * })
     * 
    **/
    create<T extends refresh_tokensCreateArgs>(
      args: SelectSubset<T, refresh_tokensCreateArgs>
    ): Prisma__refresh_tokensClient<refresh_tokensGetPayload<T>>

    /**
     * Create many Refresh_tokens.
     *     @param {refresh_tokensCreateManyArgs} args - Arguments to create many Refresh_tokens.
     *     @example
     *     // Create many Refresh_tokens
     *     const refresh_tokens = await prisma.refresh_tokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends refresh_tokensCreateManyArgs>(
      args?: SelectSubset<T, refresh_tokensCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Refresh_tokens.
     * @param {refresh_tokensDeleteArgs} args - Arguments to delete one Refresh_tokens.
     * @example
     * // Delete one Refresh_tokens
     * const Refresh_tokens = await prisma.refresh_tokens.delete({
     *   where: {
     *     // ... filter to delete one Refresh_tokens
     *   }
     * })
     * 
    **/
    delete<T extends refresh_tokensDeleteArgs>(
      args: SelectSubset<T, refresh_tokensDeleteArgs>
    ): Prisma__refresh_tokensClient<refresh_tokensGetPayload<T>>

    /**
     * Update one Refresh_tokens.
     * @param {refresh_tokensUpdateArgs} args - Arguments to update one Refresh_tokens.
     * @example
     * // Update one Refresh_tokens
     * const refresh_tokens = await prisma.refresh_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends refresh_tokensUpdateArgs>(
      args: SelectSubset<T, refresh_tokensUpdateArgs>
    ): Prisma__refresh_tokensClient<refresh_tokensGetPayload<T>>

    /**
     * Delete zero or more Refresh_tokens.
     * @param {refresh_tokensDeleteManyArgs} args - Arguments to filter Refresh_tokens to delete.
     * @example
     * // Delete a few Refresh_tokens
     * const { count } = await prisma.refresh_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends refresh_tokensDeleteManyArgs>(
      args?: SelectSubset<T, refresh_tokensDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Refresh_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refresh_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Refresh_tokens
     * const refresh_tokens = await prisma.refresh_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends refresh_tokensUpdateManyArgs>(
      args: SelectSubset<T, refresh_tokensUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Refresh_tokens.
     * @param {refresh_tokensUpsertArgs} args - Arguments to update or create a Refresh_tokens.
     * @example
     * // Update or create a Refresh_tokens
     * const refresh_tokens = await prisma.refresh_tokens.upsert({
     *   create: {
     *     // ... data to create a Refresh_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Refresh_tokens we want to update
     *   }
     * })
    **/
    upsert<T extends refresh_tokensUpsertArgs>(
      args: SelectSubset<T, refresh_tokensUpsertArgs>
    ): Prisma__refresh_tokensClient<refresh_tokensGetPayload<T>>

    /**
     * Count the number of Refresh_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refresh_tokensCountArgs} args - Arguments to filter Refresh_tokens to count.
     * @example
     * // Count the number of Refresh_tokens
     * const count = await prisma.refresh_tokens.count({
     *   where: {
     *     // ... the filter for the Refresh_tokens we want to count
     *   }
     * })
    **/
    count<T extends refresh_tokensCountArgs>(
      args?: Subset<T, refresh_tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Refresh_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Refresh_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Refresh_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Refresh_tokensAggregateArgs>(args: Subset<T, Refresh_tokensAggregateArgs>): Prisma.PrismaPromise<GetRefresh_tokensAggregateType<T>>

    /**
     * Group by Refresh_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Refresh_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Refresh_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Refresh_tokensGroupByArgs['orderBy'] }
        : { orderBy?: Refresh_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Refresh_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefresh_tokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for refresh_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__refresh_tokensClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * refresh_tokens base type for findUnique actions
   */
  export type refresh_tokensFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    /**
     * Filter, which refresh_tokens to fetch.
     */
    where: refresh_tokensWhereUniqueInput
  }

  /**
   * refresh_tokens findUnique
   */
  export interface refresh_tokensFindUniqueArgs extends refresh_tokensFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * refresh_tokens findUniqueOrThrow
   */
  export type refresh_tokensFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    /**
     * Filter, which refresh_tokens to fetch.
     */
    where: refresh_tokensWhereUniqueInput
  }


  /**
   * refresh_tokens base type for findFirst actions
   */
  export type refresh_tokensFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    /**
     * Filter, which refresh_tokens to fetch.
     */
    where?: refresh_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refresh_tokens to fetch.
     */
    orderBy?: Enumerable<refresh_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for refresh_tokens.
     */
    cursor?: refresh_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refresh_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refresh_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of refresh_tokens.
     */
    distinct?: Enumerable<Refresh_tokensScalarFieldEnum>
  }

  /**
   * refresh_tokens findFirst
   */
  export interface refresh_tokensFindFirstArgs extends refresh_tokensFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * refresh_tokens findFirstOrThrow
   */
  export type refresh_tokensFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    /**
     * Filter, which refresh_tokens to fetch.
     */
    where?: refresh_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refresh_tokens to fetch.
     */
    orderBy?: Enumerable<refresh_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for refresh_tokens.
     */
    cursor?: refresh_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refresh_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refresh_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of refresh_tokens.
     */
    distinct?: Enumerable<Refresh_tokensScalarFieldEnum>
  }


  /**
   * refresh_tokens findMany
   */
  export type refresh_tokensFindManyArgs = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    /**
     * Filter, which refresh_tokens to fetch.
     */
    where?: refresh_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refresh_tokens to fetch.
     */
    orderBy?: Enumerable<refresh_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing refresh_tokens.
     */
    cursor?: refresh_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refresh_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refresh_tokens.
     */
    skip?: number
    distinct?: Enumerable<Refresh_tokensScalarFieldEnum>
  }


  /**
   * refresh_tokens create
   */
  export type refresh_tokensCreateArgs = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    /**
     * The data needed to create a refresh_tokens.
     */
    data: XOR<refresh_tokensCreateInput, refresh_tokensUncheckedCreateInput>
  }


  /**
   * refresh_tokens createMany
   */
  export type refresh_tokensCreateManyArgs = {
    /**
     * The data used to create many refresh_tokens.
     */
    data: Enumerable<refresh_tokensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * refresh_tokens update
   */
  export type refresh_tokensUpdateArgs = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    /**
     * The data needed to update a refresh_tokens.
     */
    data: XOR<refresh_tokensUpdateInput, refresh_tokensUncheckedUpdateInput>
    /**
     * Choose, which refresh_tokens to update.
     */
    where: refresh_tokensWhereUniqueInput
  }


  /**
   * refresh_tokens updateMany
   */
  export type refresh_tokensUpdateManyArgs = {
    /**
     * The data used to update refresh_tokens.
     */
    data: XOR<refresh_tokensUpdateManyMutationInput, refresh_tokensUncheckedUpdateManyInput>
    /**
     * Filter which refresh_tokens to update
     */
    where?: refresh_tokensWhereInput
  }


  /**
   * refresh_tokens upsert
   */
  export type refresh_tokensUpsertArgs = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    /**
     * The filter to search for the refresh_tokens to update in case it exists.
     */
    where: refresh_tokensWhereUniqueInput
    /**
     * In case the refresh_tokens found by the `where` argument doesn't exist, create a new refresh_tokens with this data.
     */
    create: XOR<refresh_tokensCreateInput, refresh_tokensUncheckedCreateInput>
    /**
     * In case the refresh_tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<refresh_tokensUpdateInput, refresh_tokensUncheckedUpdateInput>
  }


  /**
   * refresh_tokens delete
   */
  export type refresh_tokensDeleteArgs = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
    /**
     * Filter which refresh_tokens to delete.
     */
    where: refresh_tokensWhereUniqueInput
  }


  /**
   * refresh_tokens deleteMany
   */
  export type refresh_tokensDeleteManyArgs = {
    /**
     * Filter which refresh_tokens to delete
     */
    where?: refresh_tokensWhereInput
  }


  /**
   * refresh_tokens without action
   */
  export type refresh_tokensArgs = {
    /**
     * Select specific fields to fetch from the refresh_tokens
     */
    select?: refresh_tokensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: refresh_tokensInclude | null
  }



  /**
   * Model one_time_tokens
   */


  export type AggregateOne_time_tokens = {
    _count: One_time_tokensCountAggregateOutputType | null
    _avg: One_time_tokensAvgAggregateOutputType | null
    _sum: One_time_tokensSumAggregateOutputType | null
    _min: One_time_tokensMinAggregateOutputType | null
    _max: One_time_tokensMaxAggregateOutputType | null
  }

  export type One_time_tokensAvgAggregateOutputType = {
    id: number | null
  }

  export type One_time_tokensSumAggregateOutputType = {
    id: number | null
  }

  export type One_time_tokensMinAggregateOutputType = {
    id: number | null
    token_id: string | null
    token_type: tokenType | null
    expires_at: Date | null
    date_created: Date | null
    updated_at: Date | null
  }

  export type One_time_tokensMaxAggregateOutputType = {
    id: number | null
    token_id: string | null
    token_type: tokenType | null
    expires_at: Date | null
    date_created: Date | null
    updated_at: Date | null
  }

  export type One_time_tokensCountAggregateOutputType = {
    id: number
    token_id: number
    token_type: number
    expires_at: number
    date_created: number
    updated_at: number
    _all: number
  }


  export type One_time_tokensAvgAggregateInputType = {
    id?: true
  }

  export type One_time_tokensSumAggregateInputType = {
    id?: true
  }

  export type One_time_tokensMinAggregateInputType = {
    id?: true
    token_id?: true
    token_type?: true
    expires_at?: true
    date_created?: true
    updated_at?: true
  }

  export type One_time_tokensMaxAggregateInputType = {
    id?: true
    token_id?: true
    token_type?: true
    expires_at?: true
    date_created?: true
    updated_at?: true
  }

  export type One_time_tokensCountAggregateInputType = {
    id?: true
    token_id?: true
    token_type?: true
    expires_at?: true
    date_created?: true
    updated_at?: true
    _all?: true
  }

  export type One_time_tokensAggregateArgs = {
    /**
     * Filter which one_time_tokens to aggregate.
     */
    where?: one_time_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of one_time_tokens to fetch.
     */
    orderBy?: Enumerable<one_time_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: one_time_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` one_time_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` one_time_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned one_time_tokens
    **/
    _count?: true | One_time_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: One_time_tokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: One_time_tokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: One_time_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: One_time_tokensMaxAggregateInputType
  }

  export type GetOne_time_tokensAggregateType<T extends One_time_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregateOne_time_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOne_time_tokens[P]>
      : GetScalarType<T[P], AggregateOne_time_tokens[P]>
  }




  export type One_time_tokensGroupByArgs = {
    where?: one_time_tokensWhereInput
    orderBy?: Enumerable<one_time_tokensOrderByWithAggregationInput>
    by: One_time_tokensScalarFieldEnum[]
    having?: one_time_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: One_time_tokensCountAggregateInputType | true
    _avg?: One_time_tokensAvgAggregateInputType
    _sum?: One_time_tokensSumAggregateInputType
    _min?: One_time_tokensMinAggregateInputType
    _max?: One_time_tokensMaxAggregateInputType
  }


  export type One_time_tokensGroupByOutputType = {
    id: number
    token_id: string
    token_type: tokenType | null
    expires_at: Date
    date_created: Date
    updated_at: Date | null
    _count: One_time_tokensCountAggregateOutputType | null
    _avg: One_time_tokensAvgAggregateOutputType | null
    _sum: One_time_tokensSumAggregateOutputType | null
    _min: One_time_tokensMinAggregateOutputType | null
    _max: One_time_tokensMaxAggregateOutputType | null
  }

  type GetOne_time_tokensGroupByPayload<T extends One_time_tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<One_time_tokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof One_time_tokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], One_time_tokensGroupByOutputType[P]>
            : GetScalarType<T[P], One_time_tokensGroupByOutputType[P]>
        }
      >
    >


  export type one_time_tokensSelect = {
    id?: boolean
    token_id?: boolean
    token_type?: boolean
    expires_at?: boolean
    date_created?: boolean
    updated_at?: boolean
  }


  export type one_time_tokensGetPayload<S extends boolean | null | undefined | one_time_tokensArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? one_time_tokens :
    S extends undefined ? never :
    S extends { include: any } & (one_time_tokensArgs | one_time_tokensFindManyArgs)
    ? one_time_tokens 
    : S extends { select: any } & (one_time_tokensArgs | one_time_tokensFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof one_time_tokens ? one_time_tokens[P] : never
  } 
      : one_time_tokens


  type one_time_tokensCountArgs = 
    Omit<one_time_tokensFindManyArgs, 'select' | 'include'> & {
      select?: One_time_tokensCountAggregateInputType | true
    }

  export interface one_time_tokensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one One_time_tokens that matches the filter.
     * @param {one_time_tokensFindUniqueArgs} args - Arguments to find a One_time_tokens
     * @example
     * // Get one One_time_tokens
     * const one_time_tokens = await prisma.one_time_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends one_time_tokensFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, one_time_tokensFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'one_time_tokens'> extends True ? Prisma__one_time_tokensClient<one_time_tokensGetPayload<T>> : Prisma__one_time_tokensClient<one_time_tokensGetPayload<T> | null, null>

    /**
     * Find one One_time_tokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {one_time_tokensFindUniqueOrThrowArgs} args - Arguments to find a One_time_tokens
     * @example
     * // Get one One_time_tokens
     * const one_time_tokens = await prisma.one_time_tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends one_time_tokensFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, one_time_tokensFindUniqueOrThrowArgs>
    ): Prisma__one_time_tokensClient<one_time_tokensGetPayload<T>>

    /**
     * Find the first One_time_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {one_time_tokensFindFirstArgs} args - Arguments to find a One_time_tokens
     * @example
     * // Get one One_time_tokens
     * const one_time_tokens = await prisma.one_time_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends one_time_tokensFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, one_time_tokensFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'one_time_tokens'> extends True ? Prisma__one_time_tokensClient<one_time_tokensGetPayload<T>> : Prisma__one_time_tokensClient<one_time_tokensGetPayload<T> | null, null>

    /**
     * Find the first One_time_tokens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {one_time_tokensFindFirstOrThrowArgs} args - Arguments to find a One_time_tokens
     * @example
     * // Get one One_time_tokens
     * const one_time_tokens = await prisma.one_time_tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends one_time_tokensFindFirstOrThrowArgs>(
      args?: SelectSubset<T, one_time_tokensFindFirstOrThrowArgs>
    ): Prisma__one_time_tokensClient<one_time_tokensGetPayload<T>>

    /**
     * Find zero or more One_time_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {one_time_tokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all One_time_tokens
     * const one_time_tokens = await prisma.one_time_tokens.findMany()
     * 
     * // Get first 10 One_time_tokens
     * const one_time_tokens = await prisma.one_time_tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const one_time_tokensWithIdOnly = await prisma.one_time_tokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends one_time_tokensFindManyArgs>(
      args?: SelectSubset<T, one_time_tokensFindManyArgs>
    ): Prisma.PrismaPromise<Array<one_time_tokensGetPayload<T>>>

    /**
     * Create a One_time_tokens.
     * @param {one_time_tokensCreateArgs} args - Arguments to create a One_time_tokens.
     * @example
     * // Create one One_time_tokens
     * const One_time_tokens = await prisma.one_time_tokens.create({
     *   data: {
     *     // ... data to create a One_time_tokens
     *   }
     * })
     * 
    **/
    create<T extends one_time_tokensCreateArgs>(
      args: SelectSubset<T, one_time_tokensCreateArgs>
    ): Prisma__one_time_tokensClient<one_time_tokensGetPayload<T>>

    /**
     * Create many One_time_tokens.
     *     @param {one_time_tokensCreateManyArgs} args - Arguments to create many One_time_tokens.
     *     @example
     *     // Create many One_time_tokens
     *     const one_time_tokens = await prisma.one_time_tokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends one_time_tokensCreateManyArgs>(
      args?: SelectSubset<T, one_time_tokensCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a One_time_tokens.
     * @param {one_time_tokensDeleteArgs} args - Arguments to delete one One_time_tokens.
     * @example
     * // Delete one One_time_tokens
     * const One_time_tokens = await prisma.one_time_tokens.delete({
     *   where: {
     *     // ... filter to delete one One_time_tokens
     *   }
     * })
     * 
    **/
    delete<T extends one_time_tokensDeleteArgs>(
      args: SelectSubset<T, one_time_tokensDeleteArgs>
    ): Prisma__one_time_tokensClient<one_time_tokensGetPayload<T>>

    /**
     * Update one One_time_tokens.
     * @param {one_time_tokensUpdateArgs} args - Arguments to update one One_time_tokens.
     * @example
     * // Update one One_time_tokens
     * const one_time_tokens = await prisma.one_time_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends one_time_tokensUpdateArgs>(
      args: SelectSubset<T, one_time_tokensUpdateArgs>
    ): Prisma__one_time_tokensClient<one_time_tokensGetPayload<T>>

    /**
     * Delete zero or more One_time_tokens.
     * @param {one_time_tokensDeleteManyArgs} args - Arguments to filter One_time_tokens to delete.
     * @example
     * // Delete a few One_time_tokens
     * const { count } = await prisma.one_time_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends one_time_tokensDeleteManyArgs>(
      args?: SelectSubset<T, one_time_tokensDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more One_time_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {one_time_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many One_time_tokens
     * const one_time_tokens = await prisma.one_time_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends one_time_tokensUpdateManyArgs>(
      args: SelectSubset<T, one_time_tokensUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one One_time_tokens.
     * @param {one_time_tokensUpsertArgs} args - Arguments to update or create a One_time_tokens.
     * @example
     * // Update or create a One_time_tokens
     * const one_time_tokens = await prisma.one_time_tokens.upsert({
     *   create: {
     *     // ... data to create a One_time_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the One_time_tokens we want to update
     *   }
     * })
    **/
    upsert<T extends one_time_tokensUpsertArgs>(
      args: SelectSubset<T, one_time_tokensUpsertArgs>
    ): Prisma__one_time_tokensClient<one_time_tokensGetPayload<T>>

    /**
     * Count the number of One_time_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {one_time_tokensCountArgs} args - Arguments to filter One_time_tokens to count.
     * @example
     * // Count the number of One_time_tokens
     * const count = await prisma.one_time_tokens.count({
     *   where: {
     *     // ... the filter for the One_time_tokens we want to count
     *   }
     * })
    **/
    count<T extends one_time_tokensCountArgs>(
      args?: Subset<T, one_time_tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], One_time_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a One_time_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {One_time_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends One_time_tokensAggregateArgs>(args: Subset<T, One_time_tokensAggregateArgs>): Prisma.PrismaPromise<GetOne_time_tokensAggregateType<T>>

    /**
     * Group by One_time_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {One_time_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends One_time_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: One_time_tokensGroupByArgs['orderBy'] }
        : { orderBy?: One_time_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, One_time_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOne_time_tokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for one_time_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__one_time_tokensClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * one_time_tokens base type for findUnique actions
   */
  export type one_time_tokensFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
    /**
     * Filter, which one_time_tokens to fetch.
     */
    where: one_time_tokensWhereUniqueInput
  }

  /**
   * one_time_tokens findUnique
   */
  export interface one_time_tokensFindUniqueArgs extends one_time_tokensFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * one_time_tokens findUniqueOrThrow
   */
  export type one_time_tokensFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
    /**
     * Filter, which one_time_tokens to fetch.
     */
    where: one_time_tokensWhereUniqueInput
  }


  /**
   * one_time_tokens base type for findFirst actions
   */
  export type one_time_tokensFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
    /**
     * Filter, which one_time_tokens to fetch.
     */
    where?: one_time_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of one_time_tokens to fetch.
     */
    orderBy?: Enumerable<one_time_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for one_time_tokens.
     */
    cursor?: one_time_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` one_time_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` one_time_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of one_time_tokens.
     */
    distinct?: Enumerable<One_time_tokensScalarFieldEnum>
  }

  /**
   * one_time_tokens findFirst
   */
  export interface one_time_tokensFindFirstArgs extends one_time_tokensFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * one_time_tokens findFirstOrThrow
   */
  export type one_time_tokensFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
    /**
     * Filter, which one_time_tokens to fetch.
     */
    where?: one_time_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of one_time_tokens to fetch.
     */
    orderBy?: Enumerable<one_time_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for one_time_tokens.
     */
    cursor?: one_time_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` one_time_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` one_time_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of one_time_tokens.
     */
    distinct?: Enumerable<One_time_tokensScalarFieldEnum>
  }


  /**
   * one_time_tokens findMany
   */
  export type one_time_tokensFindManyArgs = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
    /**
     * Filter, which one_time_tokens to fetch.
     */
    where?: one_time_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of one_time_tokens to fetch.
     */
    orderBy?: Enumerable<one_time_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing one_time_tokens.
     */
    cursor?: one_time_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` one_time_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` one_time_tokens.
     */
    skip?: number
    distinct?: Enumerable<One_time_tokensScalarFieldEnum>
  }


  /**
   * one_time_tokens create
   */
  export type one_time_tokensCreateArgs = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
    /**
     * The data needed to create a one_time_tokens.
     */
    data: XOR<one_time_tokensCreateInput, one_time_tokensUncheckedCreateInput>
  }


  /**
   * one_time_tokens createMany
   */
  export type one_time_tokensCreateManyArgs = {
    /**
     * The data used to create many one_time_tokens.
     */
    data: Enumerable<one_time_tokensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * one_time_tokens update
   */
  export type one_time_tokensUpdateArgs = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
    /**
     * The data needed to update a one_time_tokens.
     */
    data: XOR<one_time_tokensUpdateInput, one_time_tokensUncheckedUpdateInput>
    /**
     * Choose, which one_time_tokens to update.
     */
    where: one_time_tokensWhereUniqueInput
  }


  /**
   * one_time_tokens updateMany
   */
  export type one_time_tokensUpdateManyArgs = {
    /**
     * The data used to update one_time_tokens.
     */
    data: XOR<one_time_tokensUpdateManyMutationInput, one_time_tokensUncheckedUpdateManyInput>
    /**
     * Filter which one_time_tokens to update
     */
    where?: one_time_tokensWhereInput
  }


  /**
   * one_time_tokens upsert
   */
  export type one_time_tokensUpsertArgs = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
    /**
     * The filter to search for the one_time_tokens to update in case it exists.
     */
    where: one_time_tokensWhereUniqueInput
    /**
     * In case the one_time_tokens found by the `where` argument doesn't exist, create a new one_time_tokens with this data.
     */
    create: XOR<one_time_tokensCreateInput, one_time_tokensUncheckedCreateInput>
    /**
     * In case the one_time_tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<one_time_tokensUpdateInput, one_time_tokensUncheckedUpdateInput>
  }


  /**
   * one_time_tokens delete
   */
  export type one_time_tokensDeleteArgs = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
    /**
     * Filter which one_time_tokens to delete.
     */
    where: one_time_tokensWhereUniqueInput
  }


  /**
   * one_time_tokens deleteMany
   */
  export type one_time_tokensDeleteManyArgs = {
    /**
     * Filter which one_time_tokens to delete
     */
    where?: one_time_tokensWhereInput
  }


  /**
   * one_time_tokens without action
   */
  export type one_time_tokensArgs = {
    /**
     * Select specific fields to fetch from the one_time_tokens
     */
    select?: one_time_tokensSelect | null
  }



  /**
   * Model Subjects
   */


  export type AggregateSubjects = {
    _count: SubjectsCountAggregateOutputType | null
    _avg: SubjectsAvgAggregateOutputType | null
    _sum: SubjectsSumAggregateOutputType | null
    _min: SubjectsMinAggregateOutputType | null
    _max: SubjectsMaxAggregateOutputType | null
  }

  export type SubjectsAvgAggregateOutputType = {
    id: number | null
  }

  export type SubjectsSumAggregateOutputType = {
    id: number | null
  }

  export type SubjectsMinAggregateOutputType = {
    id: number | null
    nama_matkul: string | null
    nama_dosen: string | null
    hari: string | null
    jam: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SubjectsMaxAggregateOutputType = {
    id: number | null
    nama_matkul: string | null
    nama_dosen: string | null
    hari: string | null
    jam: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SubjectsCountAggregateOutputType = {
    id: number
    nama_matkul: number
    nama_dosen: number
    hari: number
    jam: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SubjectsAvgAggregateInputType = {
    id?: true
  }

  export type SubjectsSumAggregateInputType = {
    id?: true
  }

  export type SubjectsMinAggregateInputType = {
    id?: true
    nama_matkul?: true
    nama_dosen?: true
    hari?: true
    jam?: true
    created_at?: true
    updated_at?: true
  }

  export type SubjectsMaxAggregateInputType = {
    id?: true
    nama_matkul?: true
    nama_dosen?: true
    hari?: true
    jam?: true
    created_at?: true
    updated_at?: true
  }

  export type SubjectsCountAggregateInputType = {
    id?: true
    nama_matkul?: true
    nama_dosen?: true
    hari?: true
    jam?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SubjectsAggregateArgs = {
    /**
     * Filter which Subjects to aggregate.
     */
    where?: SubjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: Enumerable<SubjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectsMaxAggregateInputType
  }

  export type GetSubjectsAggregateType<T extends SubjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateSubjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubjects[P]>
      : GetScalarType<T[P], AggregateSubjects[P]>
  }




  export type SubjectsGroupByArgs = {
    where?: SubjectsWhereInput
    orderBy?: Enumerable<SubjectsOrderByWithAggregationInput>
    by: SubjectsScalarFieldEnum[]
    having?: SubjectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectsCountAggregateInputType | true
    _avg?: SubjectsAvgAggregateInputType
    _sum?: SubjectsSumAggregateInputType
    _min?: SubjectsMinAggregateInputType
    _max?: SubjectsMaxAggregateInputType
  }


  export type SubjectsGroupByOutputType = {
    id: number
    nama_matkul: string
    nama_dosen: string
    hari: string
    jam: string
    created_at: Date
    updated_at: Date | null
    _count: SubjectsCountAggregateOutputType | null
    _avg: SubjectsAvgAggregateOutputType | null
    _sum: SubjectsSumAggregateOutputType | null
    _min: SubjectsMinAggregateOutputType | null
    _max: SubjectsMaxAggregateOutputType | null
  }

  type GetSubjectsGroupByPayload<T extends SubjectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SubjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectsGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectsGroupByOutputType[P]>
        }
      >
    >


  export type SubjectsSelect = {
    id?: boolean
    nama_matkul?: boolean
    nama_dosen?: boolean
    hari?: boolean
    jam?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type SubjectsGetPayload<S extends boolean | null | undefined | SubjectsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Subjects :
    S extends undefined ? never :
    S extends { include: any } & (SubjectsArgs | SubjectsFindManyArgs)
    ? Subjects 
    : S extends { select: any } & (SubjectsArgs | SubjectsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Subjects ? Subjects[P] : never
  } 
      : Subjects


  type SubjectsCountArgs = 
    Omit<SubjectsFindManyArgs, 'select' | 'include'> & {
      select?: SubjectsCountAggregateInputType | true
    }

  export interface SubjectsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Subjects that matches the filter.
     * @param {SubjectsFindUniqueArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubjectsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SubjectsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Subjects'> extends True ? Prisma__SubjectsClient<SubjectsGetPayload<T>> : Prisma__SubjectsClient<SubjectsGetPayload<T> | null, null>

    /**
     * Find one Subjects that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubjectsFindUniqueOrThrowArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubjectsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SubjectsFindUniqueOrThrowArgs>
    ): Prisma__SubjectsClient<SubjectsGetPayload<T>>

    /**
     * Find the first Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectsFindFirstArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubjectsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SubjectsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Subjects'> extends True ? Prisma__SubjectsClient<SubjectsGetPayload<T>> : Prisma__SubjectsClient<SubjectsGetPayload<T> | null, null>

    /**
     * Find the first Subjects that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectsFindFirstOrThrowArgs} args - Arguments to find a Subjects
     * @example
     * // Get one Subjects
     * const subjects = await prisma.subjects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubjectsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SubjectsFindFirstOrThrowArgs>
    ): Prisma__SubjectsClient<SubjectsGetPayload<T>>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subjects.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subjects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectsWithIdOnly = await prisma.subjects.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubjectsFindManyArgs>(
      args?: SelectSubset<T, SubjectsFindManyArgs>
    ): Prisma.PrismaPromise<Array<SubjectsGetPayload<T>>>

    /**
     * Create a Subjects.
     * @param {SubjectsCreateArgs} args - Arguments to create a Subjects.
     * @example
     * // Create one Subjects
     * const Subjects = await prisma.subjects.create({
     *   data: {
     *     // ... data to create a Subjects
     *   }
     * })
     * 
    **/
    create<T extends SubjectsCreateArgs>(
      args: SelectSubset<T, SubjectsCreateArgs>
    ): Prisma__SubjectsClient<SubjectsGetPayload<T>>

    /**
     * Create many Subjects.
     *     @param {SubjectsCreateManyArgs} args - Arguments to create many Subjects.
     *     @example
     *     // Create many Subjects
     *     const subjects = await prisma.subjects.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubjectsCreateManyArgs>(
      args?: SelectSubset<T, SubjectsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subjects.
     * @param {SubjectsDeleteArgs} args - Arguments to delete one Subjects.
     * @example
     * // Delete one Subjects
     * const Subjects = await prisma.subjects.delete({
     *   where: {
     *     // ... filter to delete one Subjects
     *   }
     * })
     * 
    **/
    delete<T extends SubjectsDeleteArgs>(
      args: SelectSubset<T, SubjectsDeleteArgs>
    ): Prisma__SubjectsClient<SubjectsGetPayload<T>>

    /**
     * Update one Subjects.
     * @param {SubjectsUpdateArgs} args - Arguments to update one Subjects.
     * @example
     * // Update one Subjects
     * const subjects = await prisma.subjects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubjectsUpdateArgs>(
      args: SelectSubset<T, SubjectsUpdateArgs>
    ): Prisma__SubjectsClient<SubjectsGetPayload<T>>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectsDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subjects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubjectsDeleteManyArgs>(
      args?: SelectSubset<T, SubjectsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subjects = await prisma.subjects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubjectsUpdateManyArgs>(
      args: SelectSubset<T, SubjectsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subjects.
     * @param {SubjectsUpsertArgs} args - Arguments to update or create a Subjects.
     * @example
     * // Update or create a Subjects
     * const subjects = await prisma.subjects.upsert({
     *   create: {
     *     // ... data to create a Subjects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subjects we want to update
     *   }
     * })
    **/
    upsert<T extends SubjectsUpsertArgs>(
      args: SelectSubset<T, SubjectsUpsertArgs>
    ): Prisma__SubjectsClient<SubjectsGetPayload<T>>

    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectsCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subjects.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectsCountArgs>(
      args?: Subset<T, SubjectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectsAggregateArgs>(args: Subset<T, SubjectsAggregateArgs>): Prisma.PrismaPromise<GetSubjectsAggregateType<T>>

    /**
     * Group by Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectsGroupByArgs['orderBy'] }
        : { orderBy?: SubjectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Subjects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SubjectsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Subjects base type for findUnique actions
   */
  export type SubjectsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
    /**
     * Filter, which Subjects to fetch.
     */
    where: SubjectsWhereUniqueInput
  }

  /**
   * Subjects findUnique
   */
  export interface SubjectsFindUniqueArgs extends SubjectsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Subjects findUniqueOrThrow
   */
  export type SubjectsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
    /**
     * Filter, which Subjects to fetch.
     */
    where: SubjectsWhereUniqueInput
  }


  /**
   * Subjects base type for findFirst actions
   */
  export type SubjectsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: Enumerable<SubjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: Enumerable<SubjectsScalarFieldEnum>
  }

  /**
   * Subjects findFirst
   */
  export interface SubjectsFindFirstArgs extends SubjectsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Subjects findFirstOrThrow
   */
  export type SubjectsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: Enumerable<SubjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: Enumerable<SubjectsScalarFieldEnum>
  }


  /**
   * Subjects findMany
   */
  export type SubjectsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: Enumerable<SubjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: Enumerable<SubjectsScalarFieldEnum>
  }


  /**
   * Subjects create
   */
  export type SubjectsCreateArgs = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
    /**
     * The data needed to create a Subjects.
     */
    data: XOR<SubjectsCreateInput, SubjectsUncheckedCreateInput>
  }


  /**
   * Subjects createMany
   */
  export type SubjectsCreateManyArgs = {
    /**
     * The data used to create many Subjects.
     */
    data: Enumerable<SubjectsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Subjects update
   */
  export type SubjectsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
    /**
     * The data needed to update a Subjects.
     */
    data: XOR<SubjectsUpdateInput, SubjectsUncheckedUpdateInput>
    /**
     * Choose, which Subjects to update.
     */
    where: SubjectsWhereUniqueInput
  }


  /**
   * Subjects updateMany
   */
  export type SubjectsUpdateManyArgs = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectsUpdateManyMutationInput, SubjectsUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectsWhereInput
  }


  /**
   * Subjects upsert
   */
  export type SubjectsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
    /**
     * The filter to search for the Subjects to update in case it exists.
     */
    where: SubjectsWhereUniqueInput
    /**
     * In case the Subjects found by the `where` argument doesn't exist, create a new Subjects with this data.
     */
    create: XOR<SubjectsCreateInput, SubjectsUncheckedCreateInput>
    /**
     * In case the Subjects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectsUpdateInput, SubjectsUncheckedUpdateInput>
  }


  /**
   * Subjects delete
   */
  export type SubjectsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
    /**
     * Filter which Subjects to delete.
     */
    where: SubjectsWhereUniqueInput
  }


  /**
   * Subjects deleteMany
   */
  export type SubjectsDeleteManyArgs = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectsWhereInput
  }


  /**
   * Subjects without action
   */
  export type SubjectsArgs = {
    /**
     * Select specific fields to fetch from the Subjects
     */
    select?: SubjectsSelect | null
  }



  /**
   * Model Tasks
   */


  export type AggregateTasks = {
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  export type TasksAvgAggregateOutputType = {
    id: number | null
    subject_id: number | null
  }

  export type TasksSumAggregateOutputType = {
    id: number | null
    subject_id: number | null
  }

  export type TasksMinAggregateOutputType = {
    id: number | null
    job: string | null
    subject_id: number | null
    jenis: string | null
    deadline: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TasksMaxAggregateOutputType = {
    id: number | null
    job: string | null
    subject_id: number | null
    jenis: string | null
    deadline: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TasksCountAggregateOutputType = {
    id: number
    job: number
    subject_id: number
    jenis: number
    deadline: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TasksAvgAggregateInputType = {
    id?: true
    subject_id?: true
  }

  export type TasksSumAggregateInputType = {
    id?: true
    subject_id?: true
  }

  export type TasksMinAggregateInputType = {
    id?: true
    job?: true
    subject_id?: true
    jenis?: true
    deadline?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type TasksMaxAggregateInputType = {
    id?: true
    job?: true
    subject_id?: true
    jenis?: true
    deadline?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type TasksCountAggregateInputType = {
    id?: true
    job?: true
    subject_id?: true
    jenis?: true
    deadline?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TasksAggregateArgs = {
    /**
     * Filter which Tasks to aggregate.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TasksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TasksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TasksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TasksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TasksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TasksMaxAggregateInputType
  }

  export type GetTasksAggregateType<T extends TasksAggregateArgs> = {
        [P in keyof T & keyof AggregateTasks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTasks[P]>
      : GetScalarType<T[P], AggregateTasks[P]>
  }




  export type TasksGroupByArgs = {
    where?: TasksWhereInput
    orderBy?: Enumerable<TasksOrderByWithAggregationInput>
    by: TasksScalarFieldEnum[]
    having?: TasksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TasksCountAggregateInputType | true
    _avg?: TasksAvgAggregateInputType
    _sum?: TasksSumAggregateInputType
    _min?: TasksMinAggregateInputType
    _max?: TasksMaxAggregateInputType
  }


  export type TasksGroupByOutputType = {
    id: number
    job: string
    subject_id: number
    jenis: string
    deadline: string
    status: string
    created_at: Date
    updated_at: Date | null
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  type GetTasksGroupByPayload<T extends TasksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TasksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TasksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TasksGroupByOutputType[P]>
            : GetScalarType<T[P], TasksGroupByOutputType[P]>
        }
      >
    >


  export type TasksSelect = {
    id?: boolean
    job?: boolean
    subject_id?: boolean
    jenis?: boolean
    deadline?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type TasksGetPayload<S extends boolean | null | undefined | TasksArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Tasks :
    S extends undefined ? never :
    S extends { include: any } & (TasksArgs | TasksFindManyArgs)
    ? Tasks 
    : S extends { select: any } & (TasksArgs | TasksFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Tasks ? Tasks[P] : never
  } 
      : Tasks


  type TasksCountArgs = 
    Omit<TasksFindManyArgs, 'select' | 'include'> & {
      select?: TasksCountAggregateInputType | true
    }

  export interface TasksDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Tasks that matches the filter.
     * @param {TasksFindUniqueArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TasksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TasksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tasks'> extends True ? Prisma__TasksClient<TasksGetPayload<T>> : Prisma__TasksClient<TasksGetPayload<T> | null, null>

    /**
     * Find one Tasks that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TasksFindUniqueOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TasksFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TasksFindUniqueOrThrowArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Find the first Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindFirstArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TasksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TasksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tasks'> extends True ? Prisma__TasksClient<TasksGetPayload<T>> : Prisma__TasksClient<TasksGetPayload<T> | null, null>

    /**
     * Find the first Tasks that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindFirstOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TasksFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TasksFindFirstOrThrowArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.tasks.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.tasks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tasksWithIdOnly = await prisma.tasks.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TasksFindManyArgs>(
      args?: SelectSubset<T, TasksFindManyArgs>
    ): Prisma.PrismaPromise<Array<TasksGetPayload<T>>>

    /**
     * Create a Tasks.
     * @param {TasksCreateArgs} args - Arguments to create a Tasks.
     * @example
     * // Create one Tasks
     * const Tasks = await prisma.tasks.create({
     *   data: {
     *     // ... data to create a Tasks
     *   }
     * })
     * 
    **/
    create<T extends TasksCreateArgs>(
      args: SelectSubset<T, TasksCreateArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Create many Tasks.
     *     @param {TasksCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const tasks = await prisma.tasks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TasksCreateManyArgs>(
      args?: SelectSubset<T, TasksCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tasks.
     * @param {TasksDeleteArgs} args - Arguments to delete one Tasks.
     * @example
     * // Delete one Tasks
     * const Tasks = await prisma.tasks.delete({
     *   where: {
     *     // ... filter to delete one Tasks
     *   }
     * })
     * 
    **/
    delete<T extends TasksDeleteArgs>(
      args: SelectSubset<T, TasksDeleteArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Update one Tasks.
     * @param {TasksUpdateArgs} args - Arguments to update one Tasks.
     * @example
     * // Update one Tasks
     * const tasks = await prisma.tasks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TasksUpdateArgs>(
      args: SelectSubset<T, TasksUpdateArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Delete zero or more Tasks.
     * @param {TasksDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.tasks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TasksDeleteManyArgs>(
      args?: SelectSubset<T, TasksDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TasksUpdateManyArgs>(
      args: SelectSubset<T, TasksUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tasks.
     * @param {TasksUpsertArgs} args - Arguments to update or create a Tasks.
     * @example
     * // Update or create a Tasks
     * const tasks = await prisma.tasks.upsert({
     *   create: {
     *     // ... data to create a Tasks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tasks we want to update
     *   }
     * })
    **/
    upsert<T extends TasksUpsertArgs>(
      args: SelectSubset<T, TasksUpsertArgs>
    ): Prisma__TasksClient<TasksGetPayload<T>>

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.tasks.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TasksCountArgs>(
      args?: Subset<T, TasksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TasksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TasksAggregateArgs>(args: Subset<T, TasksAggregateArgs>): Prisma.PrismaPromise<GetTasksAggregateType<T>>

    /**
     * Group by Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TasksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TasksGroupByArgs['orderBy'] }
        : { orderBy?: TasksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TasksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTasksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tasks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TasksClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tasks base type for findUnique actions
   */
  export type TasksFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
    /**
     * Filter, which Tasks to fetch.
     */
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks findUnique
   */
  export interface TasksFindUniqueArgs extends TasksFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tasks findUniqueOrThrow
   */
  export type TasksFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
    /**
     * Filter, which Tasks to fetch.
     */
    where: TasksWhereUniqueInput
  }


  /**
   * Tasks base type for findFirst actions
   */
  export type TasksFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TasksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: Enumerable<TasksScalarFieldEnum>
  }

  /**
   * Tasks findFirst
   */
  export interface TasksFindFirstArgs extends TasksFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tasks findFirstOrThrow
   */
  export type TasksFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TasksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: Enumerable<TasksScalarFieldEnum>
  }


  /**
   * Tasks findMany
   */
  export type TasksFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TasksOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: Enumerable<TasksScalarFieldEnum>
  }


  /**
   * Tasks create
   */
  export type TasksCreateArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
    /**
     * The data needed to create a Tasks.
     */
    data: XOR<TasksCreateInput, TasksUncheckedCreateInput>
  }


  /**
   * Tasks createMany
   */
  export type TasksCreateManyArgs = {
    /**
     * The data used to create many Tasks.
     */
    data: Enumerable<TasksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tasks update
   */
  export type TasksUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
    /**
     * The data needed to update a Tasks.
     */
    data: XOR<TasksUpdateInput, TasksUncheckedUpdateInput>
    /**
     * Choose, which Tasks to update.
     */
    where: TasksWhereUniqueInput
  }


  /**
   * Tasks updateMany
   */
  export type TasksUpdateManyArgs = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TasksWhereInput
  }


  /**
   * Tasks upsert
   */
  export type TasksUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
    /**
     * The filter to search for the Tasks to update in case it exists.
     */
    where: TasksWhereUniqueInput
    /**
     * In case the Tasks found by the `where` argument doesn't exist, create a new Tasks with this data.
     */
    create: XOR<TasksCreateInput, TasksUncheckedCreateInput>
    /**
     * In case the Tasks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TasksUpdateInput, TasksUncheckedUpdateInput>
  }


  /**
   * Tasks delete
   */
  export type TasksDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
    /**
     * Filter which Tasks to delete.
     */
    where: TasksWhereUniqueInput
  }


  /**
   * Tasks deleteMany
   */
  export type TasksDeleteManyArgs = {
    /**
     * Filter which Tasks to delete
     */
    where?: TasksWhereInput
  }


  /**
   * Tasks without action
   */
  export type TasksArgs = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const One_time_tokensScalarFieldEnum: {
    id: 'id',
    token_id: 'token_id',
    token_type: 'token_type',
    expires_at: 'expires_at',
    date_created: 'date_created',
    updated_at: 'updated_at'
  };

  export type One_time_tokensScalarFieldEnum = (typeof One_time_tokensScalarFieldEnum)[keyof typeof One_time_tokensScalarFieldEnum]


  export const Provider_usersScalarFieldEnum: {
    id: 'id',
    provider: 'provider',
    provider_user_id: 'provider_user_id',
    user_id: 'user_id',
    updated_at: 'updated_at'
  };

  export type Provider_usersScalarFieldEnum = (typeof Provider_usersScalarFieldEnum)[keyof typeof Provider_usersScalarFieldEnum]


  export const Refresh_tokensScalarFieldEnum: {
    id: 'id',
    token_id: 'token_id',
    user_id: 'user_id',
    is_active: 'is_active',
    date_created: 'date_created',
    updated_at: 'updated_at'
  };

  export type Refresh_tokensScalarFieldEnum = (typeof Refresh_tokensScalarFieldEnum)[keyof typeof Refresh_tokensScalarFieldEnum]


  export const SessionsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    sid: 'sid',
    start_time: 'start_time',
    end_time: 'end_time',
    access_token: 'access_token',
    csrf_token: 'csrf_token',
    is_active: 'is_active',
    ip_address: 'ip_address',
    updated_at: 'updated_at'
  };

  export type SessionsScalarFieldEnum = (typeof SessionsScalarFieldEnum)[keyof typeof SessionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SubjectsScalarFieldEnum: {
    id: 'id',
    nama_matkul: 'nama_matkul',
    nama_dosen: 'nama_dosen',
    hari: 'hari',
    jam: 'jam',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SubjectsScalarFieldEnum = (typeof SubjectsScalarFieldEnum)[keyof typeof SubjectsScalarFieldEnum]


  export const TasksScalarFieldEnum: {
    id: 'id',
    job: 'job',
    subject_id: 'subject_id',
    jenis: 'jenis',
    deadline: 'deadline',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TasksScalarFieldEnum = (typeof TasksScalarFieldEnum)[keyof typeof TasksScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    email: 'email',
    password: 'password',
    avatar: 'avatar',
    permissions: 'permissions',
    first_name: 'first_name',
    last_name: 'last_name',
    role: 'role',
    email_verified: 'email_verified',
    is_active: 'is_active',
    last_login: 'last_login',
    created_at: 'created_at',
    deleted_at: 'deleted_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    uuid?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    avatar?: StringNullableFilter | string | null
    permissions?: StringNullableFilter | string | null
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    role?: EnumRoleFilter | Role
    email_verified?: BoolFilter | boolean
    is_active?: BoolFilter | boolean
    last_login?: DateTimeNullableFilter | Date | string | null
    created_at?: DateTimeFilter | Date | string
    deleted_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    refresh_tokens?: Refresh_tokensListRelationFilter
    sessions?: SessionsListRelationFilter
    provider_users?: Provider_usersListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    permissions?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    role?: SortOrder
    email_verified?: SortOrder
    is_active?: SortOrder
    last_login?: SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrder
    updated_at?: SortOrder
    refresh_tokens?: refresh_tokensOrderByRelationAggregateInput
    sessions?: sessionsOrderByRelationAggregateInput
    provider_users?: provider_usersOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    uuid?: string
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    permissions?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    role?: SortOrder
    email_verified?: SortOrder
    is_active?: SortOrder
    last_login?: SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrder
    updated_at?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    uuid?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    avatar?: StringNullableWithAggregatesFilter | string | null
    permissions?: StringNullableWithAggregatesFilter | string | null
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
    email_verified?: BoolWithAggregatesFilter | boolean
    is_active?: BoolWithAggregatesFilter | boolean
    last_login?: DateTimeNullableWithAggregatesFilter | Date | string | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type provider_usersWhereInput = {
    AND?: Enumerable<provider_usersWhereInput>
    OR?: Enumerable<provider_usersWhereInput>
    NOT?: Enumerable<provider_usersWhereInput>
    id?: IntFilter | number
    provider?: EnumProviderFilter | Provider
    provider_user_id?: StringFilter | string
    user_id?: IntFilter | number
    updated_at?: DateTimeNullableFilter | Date | string | null
    user?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type provider_usersOrderByWithRelationInput = {
    id?: SortOrder
    provider?: SortOrder
    provider_user_id?: SortOrder
    user_id?: SortOrder
    updated_at?: SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type provider_usersWhereUniqueInput = {
    id?: number
    provider_user_id?: string
  }

  export type provider_usersOrderByWithAggregationInput = {
    id?: SortOrder
    provider?: SortOrder
    provider_user_id?: SortOrder
    user_id?: SortOrder
    updated_at?: SortOrder
    _count?: provider_usersCountOrderByAggregateInput
    _avg?: provider_usersAvgOrderByAggregateInput
    _max?: provider_usersMaxOrderByAggregateInput
    _min?: provider_usersMinOrderByAggregateInput
    _sum?: provider_usersSumOrderByAggregateInput
  }

  export type provider_usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<provider_usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<provider_usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<provider_usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    provider?: EnumProviderWithAggregatesFilter | Provider
    provider_user_id?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type sessionsWhereInput = {
    AND?: Enumerable<sessionsWhereInput>
    OR?: Enumerable<sessionsWhereInput>
    NOT?: Enumerable<sessionsWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    sid?: StringFilter | string
    start_time?: DateTimeFilter | Date | string
    end_time?: DateTimeNullableFilter | Date | string | null
    access_token?: StringFilter | string
    csrf_token?: StringFilter | string
    is_active?: BoolFilter | boolean
    ip_address?: StringFilter | string
    updated_at?: DateTimeNullableFilter | Date | string | null
    user?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type sessionsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    sid?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    access_token?: SortOrder
    csrf_token?: SortOrder
    is_active?: SortOrder
    ip_address?: SortOrder
    updated_at?: SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type sessionsWhereUniqueInput = {
    id?: number
    sid?: string
  }

  export type sessionsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    sid?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    access_token?: SortOrder
    csrf_token?: SortOrder
    is_active?: SortOrder
    ip_address?: SortOrder
    updated_at?: SortOrder
    _count?: sessionsCountOrderByAggregateInput
    _avg?: sessionsAvgOrderByAggregateInput
    _max?: sessionsMaxOrderByAggregateInput
    _min?: sessionsMinOrderByAggregateInput
    _sum?: sessionsSumOrderByAggregateInput
  }

  export type sessionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<sessionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<sessionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<sessionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    sid?: StringWithAggregatesFilter | string
    start_time?: DateTimeWithAggregatesFilter | Date | string
    end_time?: DateTimeNullableWithAggregatesFilter | Date | string | null
    access_token?: StringWithAggregatesFilter | string
    csrf_token?: StringWithAggregatesFilter | string
    is_active?: BoolWithAggregatesFilter | boolean
    ip_address?: StringWithAggregatesFilter | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type refresh_tokensWhereInput = {
    AND?: Enumerable<refresh_tokensWhereInput>
    OR?: Enumerable<refresh_tokensWhereInput>
    NOT?: Enumerable<refresh_tokensWhereInput>
    id?: IntFilter | number
    token_id?: StringFilter | string
    user_id?: IntFilter | number
    is_active?: BoolFilter | boolean
    date_created?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
    user?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type refresh_tokensOrderByWithRelationInput = {
    id?: SortOrder
    token_id?: SortOrder
    user_id?: SortOrder
    is_active?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type refresh_tokensWhereUniqueInput = {
    id?: number
    token_id?: string
  }

  export type refresh_tokensOrderByWithAggregationInput = {
    id?: SortOrder
    token_id?: SortOrder
    user_id?: SortOrder
    is_active?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
    _count?: refresh_tokensCountOrderByAggregateInput
    _avg?: refresh_tokensAvgOrderByAggregateInput
    _max?: refresh_tokensMaxOrderByAggregateInput
    _min?: refresh_tokensMinOrderByAggregateInput
    _sum?: refresh_tokensSumOrderByAggregateInput
  }

  export type refresh_tokensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<refresh_tokensScalarWhereWithAggregatesInput>
    OR?: Enumerable<refresh_tokensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<refresh_tokensScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    token_id?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
    is_active?: BoolWithAggregatesFilter | boolean
    date_created?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type one_time_tokensWhereInput = {
    AND?: Enumerable<one_time_tokensWhereInput>
    OR?: Enumerable<one_time_tokensWhereInput>
    NOT?: Enumerable<one_time_tokensWhereInput>
    id?: IntFilter | number
    token_id?: StringFilter | string
    token_type?: EnumtokenTypeNullableFilter | tokenType | null
    expires_at?: DateTimeFilter | Date | string
    date_created?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type one_time_tokensOrderByWithRelationInput = {
    id?: SortOrder
    token_id?: SortOrder
    token_type?: SortOrder
    expires_at?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
  }

  export type one_time_tokensWhereUniqueInput = {
    id?: number
    token_id?: string
  }

  export type one_time_tokensOrderByWithAggregationInput = {
    id?: SortOrder
    token_id?: SortOrder
    token_type?: SortOrder
    expires_at?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
    _count?: one_time_tokensCountOrderByAggregateInput
    _avg?: one_time_tokensAvgOrderByAggregateInput
    _max?: one_time_tokensMaxOrderByAggregateInput
    _min?: one_time_tokensMinOrderByAggregateInput
    _sum?: one_time_tokensSumOrderByAggregateInput
  }

  export type one_time_tokensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<one_time_tokensScalarWhereWithAggregatesInput>
    OR?: Enumerable<one_time_tokensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<one_time_tokensScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    token_id?: StringWithAggregatesFilter | string
    token_type?: EnumtokenTypeNullableWithAggregatesFilter | tokenType | null
    expires_at?: DateTimeWithAggregatesFilter | Date | string
    date_created?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type SubjectsWhereInput = {
    AND?: Enumerable<SubjectsWhereInput>
    OR?: Enumerable<SubjectsWhereInput>
    NOT?: Enumerable<SubjectsWhereInput>
    id?: IntFilter | number
    nama_matkul?: StringFilter | string
    nama_dosen?: StringFilter | string
    hari?: StringFilter | string
    jam?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type SubjectsOrderByWithRelationInput = {
    id?: SortOrder
    nama_matkul?: SortOrder
    nama_dosen?: SortOrder
    hari?: SortOrder
    jam?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SubjectsWhereUniqueInput = {
    id?: number
  }

  export type SubjectsOrderByWithAggregationInput = {
    id?: SortOrder
    nama_matkul?: SortOrder
    nama_dosen?: SortOrder
    hari?: SortOrder
    jam?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: SubjectsCountOrderByAggregateInput
    _avg?: SubjectsAvgOrderByAggregateInput
    _max?: SubjectsMaxOrderByAggregateInput
    _min?: SubjectsMinOrderByAggregateInput
    _sum?: SubjectsSumOrderByAggregateInput
  }

  export type SubjectsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SubjectsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SubjectsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SubjectsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nama_matkul?: StringWithAggregatesFilter | string
    nama_dosen?: StringWithAggregatesFilter | string
    hari?: StringWithAggregatesFilter | string
    jam?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type TasksWhereInput = {
    AND?: Enumerable<TasksWhereInput>
    OR?: Enumerable<TasksWhereInput>
    NOT?: Enumerable<TasksWhereInput>
    id?: IntFilter | number
    job?: StringFilter | string
    subject_id?: IntFilter | number
    jenis?: StringFilter | string
    deadline?: StringFilter | string
    status?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type TasksOrderByWithRelationInput = {
    id?: SortOrder
    job?: SortOrder
    subject_id?: SortOrder
    jenis?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TasksWhereUniqueInput = {
    id?: number
  }

  export type TasksOrderByWithAggregationInput = {
    id?: SortOrder
    job?: SortOrder
    subject_id?: SortOrder
    jenis?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TasksCountOrderByAggregateInput
    _avg?: TasksAvgOrderByAggregateInput
    _max?: TasksMaxOrderByAggregateInput
    _min?: TasksMinOrderByAggregateInput
    _sum?: TasksSumOrderByAggregateInput
  }

  export type TasksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TasksScalarWhereWithAggregatesInput>
    OR?: Enumerable<TasksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TasksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    job?: StringWithAggregatesFilter | string
    subject_id?: IntWithAggregatesFilter | number
    jenis?: StringWithAggregatesFilter | string
    deadline?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type usersCreateInput = {
    uuid: string
    email: string
    password: string
    avatar?: string | null
    permissions?: string | null
    first_name: string
    last_name: string
    role?: Role
    email_verified?: boolean
    is_active?: boolean
    last_login?: Date | string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    updated_at?: Date | string | null
    refresh_tokens?: refresh_tokensCreateNestedManyWithoutUserInput
    sessions?: sessionsCreateNestedManyWithoutUserInput
    provider_users?: provider_usersCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    uuid: string
    email: string
    password: string
    avatar?: string | null
    permissions?: string | null
    first_name: string
    last_name: string
    role?: Role
    email_verified?: boolean
    is_active?: boolean
    last_login?: Date | string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    updated_at?: Date | string | null
    refresh_tokens?: refresh_tokensUncheckedCreateNestedManyWithoutUserInput
    sessions?: sessionsUncheckedCreateNestedManyWithoutUserInput
    provider_users?: provider_usersUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refresh_tokens?: refresh_tokensUpdateManyWithoutUserNestedInput
    sessions?: sessionsUpdateManyWithoutUserNestedInput
    provider_users?: provider_usersUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refresh_tokens?: refresh_tokensUncheckedUpdateManyWithoutUserNestedInput
    sessions?: sessionsUncheckedUpdateManyWithoutUserNestedInput
    provider_users?: provider_usersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    uuid: string
    email: string
    password: string
    avatar?: string | null
    permissions?: string | null
    first_name: string
    last_name: string
    role?: Role
    email_verified?: boolean
    is_active?: boolean
    last_login?: Date | string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type provider_usersCreateInput = {
    provider: Provider
    provider_user_id: string
    updated_at?: Date | string | null
    user?: usersCreateNestedOneWithoutProvider_usersInput
  }

  export type provider_usersUncheckedCreateInput = {
    id?: number
    provider: Provider
    provider_user_id: string
    user_id: number
    updated_at?: Date | string | null
  }

  export type provider_usersUpdateInput = {
    provider?: EnumProviderFieldUpdateOperationsInput | Provider
    provider_user_id?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: usersUpdateOneWithoutProvider_usersNestedInput
  }

  export type provider_usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: EnumProviderFieldUpdateOperationsInput | Provider
    provider_user_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type provider_usersCreateManyInput = {
    id?: number
    provider: Provider
    provider_user_id: string
    user_id: number
    updated_at?: Date | string | null
  }

  export type provider_usersUpdateManyMutationInput = {
    provider?: EnumProviderFieldUpdateOperationsInput | Provider
    provider_user_id?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type provider_usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: EnumProviderFieldUpdateOperationsInput | Provider
    provider_user_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sessionsCreateInput = {
    sid: string
    start_time?: Date | string
    end_time?: Date | string | null
    access_token: string
    csrf_token: string
    is_active: boolean
    ip_address: string
    updated_at?: Date | string | null
    user?: usersCreateNestedOneWithoutSessionsInput
  }

  export type sessionsUncheckedCreateInput = {
    id?: number
    user_id: number
    sid: string
    start_time?: Date | string
    end_time?: Date | string | null
    access_token: string
    csrf_token: string
    is_active: boolean
    ip_address: string
    updated_at?: Date | string | null
  }

  export type sessionsUpdateInput = {
    sid?: StringFieldUpdateOperationsInput | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    access_token?: StringFieldUpdateOperationsInput | string
    csrf_token?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    ip_address?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: usersUpdateOneWithoutSessionsNestedInput
  }

  export type sessionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    sid?: StringFieldUpdateOperationsInput | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    access_token?: StringFieldUpdateOperationsInput | string
    csrf_token?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    ip_address?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sessionsCreateManyInput = {
    id?: number
    user_id: number
    sid: string
    start_time?: Date | string
    end_time?: Date | string | null
    access_token: string
    csrf_token: string
    is_active: boolean
    ip_address: string
    updated_at?: Date | string | null
  }

  export type sessionsUpdateManyMutationInput = {
    sid?: StringFieldUpdateOperationsInput | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    access_token?: StringFieldUpdateOperationsInput | string
    csrf_token?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    ip_address?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sessionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    sid?: StringFieldUpdateOperationsInput | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    access_token?: StringFieldUpdateOperationsInput | string
    csrf_token?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    ip_address?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type refresh_tokensCreateInput = {
    token_id: string
    is_active: boolean
    date_created?: Date | string
    updated_at?: Date | string | null
    user?: usersCreateNestedOneWithoutRefresh_tokensInput
  }

  export type refresh_tokensUncheckedCreateInput = {
    id?: number
    token_id: string
    user_id: number
    is_active: boolean
    date_created?: Date | string
    updated_at?: Date | string | null
  }

  export type refresh_tokensUpdateInput = {
    token_id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: usersUpdateOneWithoutRefresh_tokensNestedInput
  }

  export type refresh_tokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    token_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type refresh_tokensCreateManyInput = {
    id?: number
    token_id: string
    user_id: number
    is_active: boolean
    date_created?: Date | string
    updated_at?: Date | string | null
  }

  export type refresh_tokensUpdateManyMutationInput = {
    token_id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type refresh_tokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    token_id?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    is_active?: BoolFieldUpdateOperationsInput | boolean
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type one_time_tokensCreateInput = {
    token_id: string
    token_type?: tokenType | null
    expires_at: Date | string
    date_created?: Date | string
    updated_at?: Date | string | null
  }

  export type one_time_tokensUncheckedCreateInput = {
    id?: number
    token_id: string
    token_type?: tokenType | null
    expires_at: Date | string
    date_created?: Date | string
    updated_at?: Date | string | null
  }

  export type one_time_tokensUpdateInput = {
    token_id?: StringFieldUpdateOperationsInput | string
    token_type?: NullableEnumtokenTypeFieldUpdateOperationsInput | tokenType | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type one_time_tokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    token_id?: StringFieldUpdateOperationsInput | string
    token_type?: NullableEnumtokenTypeFieldUpdateOperationsInput | tokenType | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type one_time_tokensCreateManyInput = {
    id?: number
    token_id: string
    token_type?: tokenType | null
    expires_at: Date | string
    date_created?: Date | string
    updated_at?: Date | string | null
  }

  export type one_time_tokensUpdateManyMutationInput = {
    token_id?: StringFieldUpdateOperationsInput | string
    token_type?: NullableEnumtokenTypeFieldUpdateOperationsInput | tokenType | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type one_time_tokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    token_id?: StringFieldUpdateOperationsInput | string
    token_type?: NullableEnumtokenTypeFieldUpdateOperationsInput | tokenType | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubjectsCreateInput = {
    nama_matkul: string
    nama_dosen: string
    hari: string
    jam: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type SubjectsUncheckedCreateInput = {
    id?: number
    nama_matkul: string
    nama_dosen: string
    hari: string
    jam: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type SubjectsUpdateInput = {
    nama_matkul?: StringFieldUpdateOperationsInput | string
    nama_dosen?: StringFieldUpdateOperationsInput | string
    hari?: StringFieldUpdateOperationsInput | string
    jam?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubjectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_matkul?: StringFieldUpdateOperationsInput | string
    nama_dosen?: StringFieldUpdateOperationsInput | string
    hari?: StringFieldUpdateOperationsInput | string
    jam?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubjectsCreateManyInput = {
    id?: number
    nama_matkul: string
    nama_dosen: string
    hari: string
    jam: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type SubjectsUpdateManyMutationInput = {
    nama_matkul?: StringFieldUpdateOperationsInput | string
    nama_dosen?: StringFieldUpdateOperationsInput | string
    hari?: StringFieldUpdateOperationsInput | string
    jam?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SubjectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama_matkul?: StringFieldUpdateOperationsInput | string
    nama_dosen?: StringFieldUpdateOperationsInput | string
    hari?: StringFieldUpdateOperationsInput | string
    jam?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TasksCreateInput = {
    job: string
    subject_id: number
    jenis: string
    deadline: string
    status: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type TasksUncheckedCreateInput = {
    id?: number
    job: string
    subject_id: number
    jenis: string
    deadline: string
    status: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type TasksUpdateInput = {
    job?: StringFieldUpdateOperationsInput | string
    subject_id?: IntFieldUpdateOperationsInput | number
    jenis?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TasksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    job?: StringFieldUpdateOperationsInput | string
    subject_id?: IntFieldUpdateOperationsInput | number
    jenis?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TasksCreateManyInput = {
    id?: number
    job: string
    subject_id: number
    jenis: string
    deadline: string
    status: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type TasksUpdateManyMutationInput = {
    job?: StringFieldUpdateOperationsInput | string
    subject_id?: IntFieldUpdateOperationsInput | number
    jenis?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TasksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    job?: StringFieldUpdateOperationsInput | string
    subject_id?: IntFieldUpdateOperationsInput | number
    jenis?: StringFieldUpdateOperationsInput | string
    deadline?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Refresh_tokensListRelationFilter = {
    every?: refresh_tokensWhereInput
    some?: refresh_tokensWhereInput
    none?: refresh_tokensWhereInput
  }

  export type SessionsListRelationFilter = {
    every?: sessionsWhereInput
    some?: sessionsWhereInput
    none?: sessionsWhereInput
  }

  export type Provider_usersListRelationFilter = {
    every?: provider_usersWhereInput
    some?: provider_usersWhereInput
    none?: provider_usersWhereInput
  }

  export type refresh_tokensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sessionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type provider_usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    permissions?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    role?: SortOrder
    email_verified?: SortOrder
    is_active?: SortOrder
    last_login?: SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    permissions?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    role?: SortOrder
    email_verified?: SortOrder
    is_active?: SortOrder
    last_login?: SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    permissions?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    role?: SortOrder
    email_verified?: SortOrder
    is_active?: SortOrder
    last_login?: SortOrder
    created_at?: SortOrder
    deleted_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumProviderFilter = {
    equals?: Provider
    in?: Enumerable<Provider>
    notIn?: Enumerable<Provider>
    not?: NestedEnumProviderFilter | Provider
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type provider_usersCountOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    provider_user_id?: SortOrder
    user_id?: SortOrder
    updated_at?: SortOrder
  }

  export type provider_usersAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type provider_usersMaxOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    provider_user_id?: SortOrder
    user_id?: SortOrder
    updated_at?: SortOrder
  }

  export type provider_usersMinOrderByAggregateInput = {
    id?: SortOrder
    provider?: SortOrder
    provider_user_id?: SortOrder
    user_id?: SortOrder
    updated_at?: SortOrder
  }

  export type provider_usersSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type EnumProviderWithAggregatesFilter = {
    equals?: Provider
    in?: Enumerable<Provider>
    notIn?: Enumerable<Provider>
    not?: NestedEnumProviderWithAggregatesFilter | Provider
    _count?: NestedIntFilter
    _min?: NestedEnumProviderFilter
    _max?: NestedEnumProviderFilter
  }

  export type sessionsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    sid?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    access_token?: SortOrder
    csrf_token?: SortOrder
    is_active?: SortOrder
    ip_address?: SortOrder
    updated_at?: SortOrder
  }

  export type sessionsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type sessionsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    sid?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    access_token?: SortOrder
    csrf_token?: SortOrder
    is_active?: SortOrder
    ip_address?: SortOrder
    updated_at?: SortOrder
  }

  export type sessionsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    sid?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    access_token?: SortOrder
    csrf_token?: SortOrder
    is_active?: SortOrder
    ip_address?: SortOrder
    updated_at?: SortOrder
  }

  export type sessionsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type refresh_tokensCountOrderByAggregateInput = {
    id?: SortOrder
    token_id?: SortOrder
    user_id?: SortOrder
    is_active?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
  }

  export type refresh_tokensAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type refresh_tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    token_id?: SortOrder
    user_id?: SortOrder
    is_active?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
  }

  export type refresh_tokensMinOrderByAggregateInput = {
    id?: SortOrder
    token_id?: SortOrder
    user_id?: SortOrder
    is_active?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
  }

  export type refresh_tokensSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type EnumtokenTypeNullableFilter = {
    equals?: tokenType | null
    in?: Enumerable<tokenType> | null
    notIn?: Enumerable<tokenType> | null
    not?: NestedEnumtokenTypeNullableFilter | tokenType | null
  }

  export type one_time_tokensCountOrderByAggregateInput = {
    id?: SortOrder
    token_id?: SortOrder
    token_type?: SortOrder
    expires_at?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
  }

  export type one_time_tokensAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type one_time_tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    token_id?: SortOrder
    token_type?: SortOrder
    expires_at?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
  }

  export type one_time_tokensMinOrderByAggregateInput = {
    id?: SortOrder
    token_id?: SortOrder
    token_type?: SortOrder
    expires_at?: SortOrder
    date_created?: SortOrder
    updated_at?: SortOrder
  }

  export type one_time_tokensSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumtokenTypeNullableWithAggregatesFilter = {
    equals?: tokenType | null
    in?: Enumerable<tokenType> | null
    notIn?: Enumerable<tokenType> | null
    not?: NestedEnumtokenTypeNullableWithAggregatesFilter | tokenType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumtokenTypeNullableFilter
    _max?: NestedEnumtokenTypeNullableFilter
  }

  export type SubjectsCountOrderByAggregateInput = {
    id?: SortOrder
    nama_matkul?: SortOrder
    nama_dosen?: SortOrder
    hari?: SortOrder
    jam?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SubjectsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectsMaxOrderByAggregateInput = {
    id?: SortOrder
    nama_matkul?: SortOrder
    nama_dosen?: SortOrder
    hari?: SortOrder
    jam?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SubjectsMinOrderByAggregateInput = {
    id?: SortOrder
    nama_matkul?: SortOrder
    nama_dosen?: SortOrder
    hari?: SortOrder
    jam?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SubjectsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TasksCountOrderByAggregateInput = {
    id?: SortOrder
    job?: SortOrder
    subject_id?: SortOrder
    jenis?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TasksAvgOrderByAggregateInput = {
    id?: SortOrder
    subject_id?: SortOrder
  }

  export type TasksMaxOrderByAggregateInput = {
    id?: SortOrder
    job?: SortOrder
    subject_id?: SortOrder
    jenis?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TasksMinOrderByAggregateInput = {
    id?: SortOrder
    job?: SortOrder
    subject_id?: SortOrder
    jenis?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TasksSumOrderByAggregateInput = {
    id?: SortOrder
    subject_id?: SortOrder
  }

  export type refresh_tokensCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<refresh_tokensCreateWithoutUserInput>, Enumerable<refresh_tokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<refresh_tokensCreateOrConnectWithoutUserInput>
    createMany?: refresh_tokensCreateManyUserInputEnvelope
    connect?: Enumerable<refresh_tokensWhereUniqueInput>
  }

  export type sessionsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionsCreateWithoutUserInput>, Enumerable<sessionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionsCreateOrConnectWithoutUserInput>
    createMany?: sessionsCreateManyUserInputEnvelope
    connect?: Enumerable<sessionsWhereUniqueInput>
  }

  export type provider_usersCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<provider_usersCreateWithoutUserInput>, Enumerable<provider_usersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<provider_usersCreateOrConnectWithoutUserInput>
    createMany?: provider_usersCreateManyUserInputEnvelope
    connect?: Enumerable<provider_usersWhereUniqueInput>
  }

  export type refresh_tokensUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<refresh_tokensCreateWithoutUserInput>, Enumerable<refresh_tokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<refresh_tokensCreateOrConnectWithoutUserInput>
    createMany?: refresh_tokensCreateManyUserInputEnvelope
    connect?: Enumerable<refresh_tokensWhereUniqueInput>
  }

  export type sessionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<sessionsCreateWithoutUserInput>, Enumerable<sessionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionsCreateOrConnectWithoutUserInput>
    createMany?: sessionsCreateManyUserInputEnvelope
    connect?: Enumerable<sessionsWhereUniqueInput>
  }

  export type provider_usersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<provider_usersCreateWithoutUserInput>, Enumerable<provider_usersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<provider_usersCreateOrConnectWithoutUserInput>
    createMany?: provider_usersCreateManyUserInputEnvelope
    connect?: Enumerable<provider_usersWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type refresh_tokensUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<refresh_tokensCreateWithoutUserInput>, Enumerable<refresh_tokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<refresh_tokensCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<refresh_tokensUpsertWithWhereUniqueWithoutUserInput>
    createMany?: refresh_tokensCreateManyUserInputEnvelope
    set?: Enumerable<refresh_tokensWhereUniqueInput>
    disconnect?: Enumerable<refresh_tokensWhereUniqueInput>
    delete?: Enumerable<refresh_tokensWhereUniqueInput>
    connect?: Enumerable<refresh_tokensWhereUniqueInput>
    update?: Enumerable<refresh_tokensUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<refresh_tokensUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<refresh_tokensScalarWhereInput>
  }

  export type sessionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<sessionsCreateWithoutUserInput>, Enumerable<sessionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<sessionsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: sessionsCreateManyUserInputEnvelope
    set?: Enumerable<sessionsWhereUniqueInput>
    disconnect?: Enumerable<sessionsWhereUniqueInput>
    delete?: Enumerable<sessionsWhereUniqueInput>
    connect?: Enumerable<sessionsWhereUniqueInput>
    update?: Enumerable<sessionsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<sessionsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<sessionsScalarWhereInput>
  }

  export type provider_usersUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<provider_usersCreateWithoutUserInput>, Enumerable<provider_usersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<provider_usersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<provider_usersUpsertWithWhereUniqueWithoutUserInput>
    createMany?: provider_usersCreateManyUserInputEnvelope
    set?: Enumerable<provider_usersWhereUniqueInput>
    disconnect?: Enumerable<provider_usersWhereUniqueInput>
    delete?: Enumerable<provider_usersWhereUniqueInput>
    connect?: Enumerable<provider_usersWhereUniqueInput>
    update?: Enumerable<provider_usersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<provider_usersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<provider_usersScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type refresh_tokensUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<refresh_tokensCreateWithoutUserInput>, Enumerable<refresh_tokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<refresh_tokensCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<refresh_tokensUpsertWithWhereUniqueWithoutUserInput>
    createMany?: refresh_tokensCreateManyUserInputEnvelope
    set?: Enumerable<refresh_tokensWhereUniqueInput>
    disconnect?: Enumerable<refresh_tokensWhereUniqueInput>
    delete?: Enumerable<refresh_tokensWhereUniqueInput>
    connect?: Enumerable<refresh_tokensWhereUniqueInput>
    update?: Enumerable<refresh_tokensUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<refresh_tokensUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<refresh_tokensScalarWhereInput>
  }

  export type sessionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<sessionsCreateWithoutUserInput>, Enumerable<sessionsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<sessionsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<sessionsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: sessionsCreateManyUserInputEnvelope
    set?: Enumerable<sessionsWhereUniqueInput>
    disconnect?: Enumerable<sessionsWhereUniqueInput>
    delete?: Enumerable<sessionsWhereUniqueInput>
    connect?: Enumerable<sessionsWhereUniqueInput>
    update?: Enumerable<sessionsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<sessionsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<sessionsScalarWhereInput>
  }

  export type provider_usersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<provider_usersCreateWithoutUserInput>, Enumerable<provider_usersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<provider_usersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<provider_usersUpsertWithWhereUniqueWithoutUserInput>
    createMany?: provider_usersCreateManyUserInputEnvelope
    set?: Enumerable<provider_usersWhereUniqueInput>
    disconnect?: Enumerable<provider_usersWhereUniqueInput>
    delete?: Enumerable<provider_usersWhereUniqueInput>
    connect?: Enumerable<provider_usersWhereUniqueInput>
    update?: Enumerable<provider_usersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<provider_usersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<provider_usersScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutProvider_usersInput = {
    create?: XOR<usersCreateWithoutProvider_usersInput, usersUncheckedCreateWithoutProvider_usersInput>
    connectOrCreate?: usersCreateOrConnectWithoutProvider_usersInput
    connect?: usersWhereUniqueInput
  }

  export type EnumProviderFieldUpdateOperationsInput = {
    set?: Provider
  }

  export type usersUpdateOneWithoutProvider_usersNestedInput = {
    create?: XOR<usersCreateWithoutProvider_usersInput, usersUncheckedCreateWithoutProvider_usersInput>
    connectOrCreate?: usersCreateOrConnectWithoutProvider_usersInput
    upsert?: usersUpsertWithoutProvider_usersInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutProvider_usersInput, usersUncheckedUpdateWithoutProvider_usersInput>
  }

  export type usersCreateNestedOneWithoutSessionsInput = {
    create?: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutSessionsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutSessionsNestedInput = {
    create?: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutSessionsInput
    upsert?: usersUpsertWithoutSessionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutSessionsInput, usersUncheckedUpdateWithoutSessionsInput>
  }

  export type usersCreateNestedOneWithoutRefresh_tokensInput = {
    create?: XOR<usersCreateWithoutRefresh_tokensInput, usersUncheckedCreateWithoutRefresh_tokensInput>
    connectOrCreate?: usersCreateOrConnectWithoutRefresh_tokensInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutRefresh_tokensNestedInput = {
    create?: XOR<usersCreateWithoutRefresh_tokensInput, usersUncheckedCreateWithoutRefresh_tokensInput>
    connectOrCreate?: usersCreateOrConnectWithoutRefresh_tokensInput
    upsert?: usersUpsertWithoutRefresh_tokensInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutRefresh_tokensInput, usersUncheckedUpdateWithoutRefresh_tokensInput>
  }

  export type NullableEnumtokenTypeFieldUpdateOperationsInput = {
    set?: tokenType | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumProviderFilter = {
    equals?: Provider
    in?: Enumerable<Provider>
    notIn?: Enumerable<Provider>
    not?: NestedEnumProviderFilter | Provider
  }

  export type NestedEnumProviderWithAggregatesFilter = {
    equals?: Provider
    in?: Enumerable<Provider>
    notIn?: Enumerable<Provider>
    not?: NestedEnumProviderWithAggregatesFilter | Provider
    _count?: NestedIntFilter
    _min?: NestedEnumProviderFilter
    _max?: NestedEnumProviderFilter
  }

  export type NestedEnumtokenTypeNullableFilter = {
    equals?: tokenType | null
    in?: Enumerable<tokenType> | null
    notIn?: Enumerable<tokenType> | null
    not?: NestedEnumtokenTypeNullableFilter | tokenType | null
  }

  export type NestedEnumtokenTypeNullableWithAggregatesFilter = {
    equals?: tokenType | null
    in?: Enumerable<tokenType> | null
    notIn?: Enumerable<tokenType> | null
    not?: NestedEnumtokenTypeNullableWithAggregatesFilter | tokenType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumtokenTypeNullableFilter
    _max?: NestedEnumtokenTypeNullableFilter
  }

  export type refresh_tokensCreateWithoutUserInput = {
    token_id: string
    is_active: boolean
    date_created?: Date | string
    updated_at?: Date | string | null
  }

  export type refresh_tokensUncheckedCreateWithoutUserInput = {
    id?: number
    token_id: string
    is_active: boolean
    date_created?: Date | string
    updated_at?: Date | string | null
  }

  export type refresh_tokensCreateOrConnectWithoutUserInput = {
    where: refresh_tokensWhereUniqueInput
    create: XOR<refresh_tokensCreateWithoutUserInput, refresh_tokensUncheckedCreateWithoutUserInput>
  }

  export type refresh_tokensCreateManyUserInputEnvelope = {
    data: Enumerable<refresh_tokensCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type sessionsCreateWithoutUserInput = {
    sid: string
    start_time?: Date | string
    end_time?: Date | string | null
    access_token: string
    csrf_token: string
    is_active: boolean
    ip_address: string
    updated_at?: Date | string | null
  }

  export type sessionsUncheckedCreateWithoutUserInput = {
    id?: number
    sid: string
    start_time?: Date | string
    end_time?: Date | string | null
    access_token: string
    csrf_token: string
    is_active: boolean
    ip_address: string
    updated_at?: Date | string | null
  }

  export type sessionsCreateOrConnectWithoutUserInput = {
    where: sessionsWhereUniqueInput
    create: XOR<sessionsCreateWithoutUserInput, sessionsUncheckedCreateWithoutUserInput>
  }

  export type sessionsCreateManyUserInputEnvelope = {
    data: Enumerable<sessionsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type provider_usersCreateWithoutUserInput = {
    provider: Provider
    provider_user_id: string
    updated_at?: Date | string | null
  }

  export type provider_usersUncheckedCreateWithoutUserInput = {
    id?: number
    provider: Provider
    provider_user_id: string
    updated_at?: Date | string | null
  }

  export type provider_usersCreateOrConnectWithoutUserInput = {
    where: provider_usersWhereUniqueInput
    create: XOR<provider_usersCreateWithoutUserInput, provider_usersUncheckedCreateWithoutUserInput>
  }

  export type provider_usersCreateManyUserInputEnvelope = {
    data: Enumerable<provider_usersCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type refresh_tokensUpsertWithWhereUniqueWithoutUserInput = {
    where: refresh_tokensWhereUniqueInput
    update: XOR<refresh_tokensUpdateWithoutUserInput, refresh_tokensUncheckedUpdateWithoutUserInput>
    create: XOR<refresh_tokensCreateWithoutUserInput, refresh_tokensUncheckedCreateWithoutUserInput>
  }

  export type refresh_tokensUpdateWithWhereUniqueWithoutUserInput = {
    where: refresh_tokensWhereUniqueInput
    data: XOR<refresh_tokensUpdateWithoutUserInput, refresh_tokensUncheckedUpdateWithoutUserInput>
  }

  export type refresh_tokensUpdateManyWithWhereWithoutUserInput = {
    where: refresh_tokensScalarWhereInput
    data: XOR<refresh_tokensUpdateManyMutationInput, refresh_tokensUncheckedUpdateManyWithoutRefresh_tokensInput>
  }

  export type refresh_tokensScalarWhereInput = {
    AND?: Enumerable<refresh_tokensScalarWhereInput>
    OR?: Enumerable<refresh_tokensScalarWhereInput>
    NOT?: Enumerable<refresh_tokensScalarWhereInput>
    id?: IntFilter | number
    token_id?: StringFilter | string
    user_id?: IntFilter | number
    is_active?: BoolFilter | boolean
    date_created?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type sessionsUpsertWithWhereUniqueWithoutUserInput = {
    where: sessionsWhereUniqueInput
    update: XOR<sessionsUpdateWithoutUserInput, sessionsUncheckedUpdateWithoutUserInput>
    create: XOR<sessionsCreateWithoutUserInput, sessionsUncheckedCreateWithoutUserInput>
  }

  export type sessionsUpdateWithWhereUniqueWithoutUserInput = {
    where: sessionsWhereUniqueInput
    data: XOR<sessionsUpdateWithoutUserInput, sessionsUncheckedUpdateWithoutUserInput>
  }

  export type sessionsUpdateManyWithWhereWithoutUserInput = {
    where: sessionsScalarWhereInput
    data: XOR<sessionsUpdateManyMutationInput, sessionsUncheckedUpdateManyWithoutSessionsInput>
  }

  export type sessionsScalarWhereInput = {
    AND?: Enumerable<sessionsScalarWhereInput>
    OR?: Enumerable<sessionsScalarWhereInput>
    NOT?: Enumerable<sessionsScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    sid?: StringFilter | string
    start_time?: DateTimeFilter | Date | string
    end_time?: DateTimeNullableFilter | Date | string | null
    access_token?: StringFilter | string
    csrf_token?: StringFilter | string
    is_active?: BoolFilter | boolean
    ip_address?: StringFilter | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type provider_usersUpsertWithWhereUniqueWithoutUserInput = {
    where: provider_usersWhereUniqueInput
    update: XOR<provider_usersUpdateWithoutUserInput, provider_usersUncheckedUpdateWithoutUserInput>
    create: XOR<provider_usersCreateWithoutUserInput, provider_usersUncheckedCreateWithoutUserInput>
  }

  export type provider_usersUpdateWithWhereUniqueWithoutUserInput = {
    where: provider_usersWhereUniqueInput
    data: XOR<provider_usersUpdateWithoutUserInput, provider_usersUncheckedUpdateWithoutUserInput>
  }

  export type provider_usersUpdateManyWithWhereWithoutUserInput = {
    where: provider_usersScalarWhereInput
    data: XOR<provider_usersUpdateManyMutationInput, provider_usersUncheckedUpdateManyWithoutProvider_usersInput>
  }

  export type provider_usersScalarWhereInput = {
    AND?: Enumerable<provider_usersScalarWhereInput>
    OR?: Enumerable<provider_usersScalarWhereInput>
    NOT?: Enumerable<provider_usersScalarWhereInput>
    id?: IntFilter | number
    provider?: EnumProviderFilter | Provider
    provider_user_id?: StringFilter | string
    user_id?: IntFilter | number
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type usersCreateWithoutProvider_usersInput = {
    uuid: string
    email: string
    password: string
    avatar?: string | null
    permissions?: string | null
    first_name: string
    last_name: string
    role?: Role
    email_verified?: boolean
    is_active?: boolean
    last_login?: Date | string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    updated_at?: Date | string | null
    refresh_tokens?: refresh_tokensCreateNestedManyWithoutUserInput
    sessions?: sessionsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutProvider_usersInput = {
    id?: number
    uuid: string
    email: string
    password: string
    avatar?: string | null
    permissions?: string | null
    first_name: string
    last_name: string
    role?: Role
    email_verified?: boolean
    is_active?: boolean
    last_login?: Date | string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    updated_at?: Date | string | null
    refresh_tokens?: refresh_tokensUncheckedCreateNestedManyWithoutUserInput
    sessions?: sessionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutProvider_usersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutProvider_usersInput, usersUncheckedCreateWithoutProvider_usersInput>
  }

  export type usersUpsertWithoutProvider_usersInput = {
    update: XOR<usersUpdateWithoutProvider_usersInput, usersUncheckedUpdateWithoutProvider_usersInput>
    create: XOR<usersCreateWithoutProvider_usersInput, usersUncheckedCreateWithoutProvider_usersInput>
  }

  export type usersUpdateWithoutProvider_usersInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refresh_tokens?: refresh_tokensUpdateManyWithoutUserNestedInput
    sessions?: sessionsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutProvider_usersInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refresh_tokens?: refresh_tokensUncheckedUpdateManyWithoutUserNestedInput
    sessions?: sessionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateWithoutSessionsInput = {
    uuid: string
    email: string
    password: string
    avatar?: string | null
    permissions?: string | null
    first_name: string
    last_name: string
    role?: Role
    email_verified?: boolean
    is_active?: boolean
    last_login?: Date | string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    updated_at?: Date | string | null
    refresh_tokens?: refresh_tokensCreateNestedManyWithoutUserInput
    provider_users?: provider_usersCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutSessionsInput = {
    id?: number
    uuid: string
    email: string
    password: string
    avatar?: string | null
    permissions?: string | null
    first_name: string
    last_name: string
    role?: Role
    email_verified?: boolean
    is_active?: boolean
    last_login?: Date | string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    updated_at?: Date | string | null
    refresh_tokens?: refresh_tokensUncheckedCreateNestedManyWithoutUserInput
    provider_users?: provider_usersUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutSessionsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
  }

  export type usersUpsertWithoutSessionsInput = {
    update: XOR<usersUpdateWithoutSessionsInput, usersUncheckedUpdateWithoutSessionsInput>
    create: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
  }

  export type usersUpdateWithoutSessionsInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refresh_tokens?: refresh_tokensUpdateManyWithoutUserNestedInput
    provider_users?: provider_usersUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refresh_tokens?: refresh_tokensUncheckedUpdateManyWithoutUserNestedInput
    provider_users?: provider_usersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateWithoutRefresh_tokensInput = {
    uuid: string
    email: string
    password: string
    avatar?: string | null
    permissions?: string | null
    first_name: string
    last_name: string
    role?: Role
    email_verified?: boolean
    is_active?: boolean
    last_login?: Date | string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    updated_at?: Date | string | null
    sessions?: sessionsCreateNestedManyWithoutUserInput
    provider_users?: provider_usersCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutRefresh_tokensInput = {
    id?: number
    uuid: string
    email: string
    password: string
    avatar?: string | null
    permissions?: string | null
    first_name: string
    last_name: string
    role?: Role
    email_verified?: boolean
    is_active?: boolean
    last_login?: Date | string | null
    created_at?: Date | string
    deleted_at?: Date | string | null
    updated_at?: Date | string | null
    sessions?: sessionsUncheckedCreateNestedManyWithoutUserInput
    provider_users?: provider_usersUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutRefresh_tokensInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRefresh_tokensInput, usersUncheckedCreateWithoutRefresh_tokensInput>
  }

  export type usersUpsertWithoutRefresh_tokensInput = {
    update: XOR<usersUpdateWithoutRefresh_tokensInput, usersUncheckedUpdateWithoutRefresh_tokensInput>
    create: XOR<usersCreateWithoutRefresh_tokensInput, usersUncheckedCreateWithoutRefresh_tokensInput>
  }

  export type usersUpdateWithoutRefresh_tokensInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: sessionsUpdateManyWithoutUserNestedInput
    provider_users?: provider_usersUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutRefresh_tokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    email_verified?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    last_login?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: sessionsUncheckedUpdateManyWithoutUserNestedInput
    provider_users?: provider_usersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type refresh_tokensCreateManyUserInput = {
    id?: number
    token_id: string
    is_active: boolean
    date_created?: Date | string
    updated_at?: Date | string | null
  }

  export type sessionsCreateManyUserInput = {
    id?: number
    sid: string
    start_time?: Date | string
    end_time?: Date | string | null
    access_token: string
    csrf_token: string
    is_active: boolean
    ip_address: string
    updated_at?: Date | string | null
  }

  export type provider_usersCreateManyUserInput = {
    id?: number
    provider: Provider
    provider_user_id: string
    updated_at?: Date | string | null
  }

  export type refresh_tokensUpdateWithoutUserInput = {
    token_id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type refresh_tokensUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token_id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type refresh_tokensUncheckedUpdateManyWithoutRefresh_tokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    token_id?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sessionsUpdateWithoutUserInput = {
    sid?: StringFieldUpdateOperationsInput | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    access_token?: StringFieldUpdateOperationsInput | string
    csrf_token?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    ip_address?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sessionsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sid?: StringFieldUpdateOperationsInput | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    access_token?: StringFieldUpdateOperationsInput | string
    csrf_token?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    ip_address?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type sessionsUncheckedUpdateManyWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sid?: StringFieldUpdateOperationsInput | string
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    access_token?: StringFieldUpdateOperationsInput | string
    csrf_token?: StringFieldUpdateOperationsInput | string
    is_active?: BoolFieldUpdateOperationsInput | boolean
    ip_address?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type provider_usersUpdateWithoutUserInput = {
    provider?: EnumProviderFieldUpdateOperationsInput | Provider
    provider_user_id?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type provider_usersUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: EnumProviderFieldUpdateOperationsInput | Provider
    provider_user_id?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type provider_usersUncheckedUpdateManyWithoutProvider_usersInput = {
    id?: IntFieldUpdateOperationsInput | number
    provider?: EnumProviderFieldUpdateOperationsInput | Provider
    provider_user_id?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}